<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | Vintion's blog]]></title>
  <link href="http://mkdir1.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://mkdir1.github.io/"/>
  <updated>2014-07-14T09:06:04+08:00</updated>
  <id>http://mkdir1.github.io/</id>
  <author>
    <name><![CDATA[Vintion]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Love-Letter Mystery]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/11/the-love-letter-mystery/"/>
    <updated>2014-07-11T14:55:48+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/11/the-love-letter-mystery</id>
    <content type="html"><![CDATA[<h4><a href="https://www.hackerrank.com/challenges/the-love-letter-mystery">The Love-Letter Mystery</a></h4>

<hr />

<p>James got hold of a love letter that his friend Harry has written for his girlfriend. Being the prankster that James is, he decides to meddle with it. He changes all the words in the letter into palindromes.</p>

<p>While modifying the letters of the word, he follows 2 rules:</p>

<p>(a) He always reduces the value of a letter, e.g. he changes &rsquo;d' to &lsquo;c&rsquo;, but he does not change &lsquo;c&rsquo; to &rsquo;d'.
(b) If he has to repeatedly reduce the value of a letter, he can do it until the letter becomes &lsquo;a&rsquo;. Once a letter has been changed to &lsquo;a&rsquo;, it can no longer be changed.</p>

<p>Each reduction in the value of any letter is counted as a single operation. Find the minimum number of operations he carries out to convert a given string into a palindrome.</p>

<!--more-->


<p>Input Format</p>

<p>The first line contains an integer T, i.e., the number of test cases.
The next T lines will contain a string each.</p>

<p>Output Format</p>

<p>A single line containing the number of minimum operations corresponding to each test case.</p>

<p>Constraints
<code>
1 ≤ T ≤ 10
1 ≤ length of string ≤ 104
All characters are lower cased english letters.
</code>
Sample Input #00
<code>
3
abc
abcba
abcd
</code>
Sample Output #00
<code>
2
0
4
</code>
Explanation</p>

<p>For the first test case, ab<em>c</em> &ndash;> ab<em>b</em> &ndash;> ab<em>a</em>.
For the second test case, abcba is a palindromic string.
For the third test case, abc<em>d</em> &ndash;> abc<em>c</em> &ndash;> abc<em>b</em> &ndash;> abc<em>a</em> = ab<em>c</em>a &ndash;> ab<em>b</em>a.</p>

<hr />

<p>**The Code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string.h&gt;
using namespace std;

int main()
{
    int T,sum,j,diff;
    char str[10000];
    while(cin&gt;&gt;T)
        {
        for(int i=0;i&lt;T;i++)
            {
            cin&gt;&gt;str;
            int len = strlen(str);
            len -=1;
            sum = 0;
            j = 0;
            while(j&lt;len)
                {
                str[j]&gt;str[len]?diff=str[j]-str[len]:diff=str[len]-str[j];
                sum += diff;
                j++;
                len--;
            }
            cout&lt;&lt;sum&lt;&lt;endl;
        }
    }
    return 0;
}
</code></pre>

<p><audio controls="controls">
  <source src="http://mkdir1.github.io/music/xing.mp3" type="audio/mpeg">
</audio></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem-stones]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/11/gem-stones/"/>
    <updated>2014-07-11T14:38:44+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/11/gem-stones</id>
    <content type="html"><![CDATA[<h3><a href="https://www.hackerrank.com/challenges/gem-stones">Gem-stones</a></h3>

<p>John has discovered various rocks. Each rock is composed of various elements, and each element is represented by a lowercase latin letter from &lsquo;a&rsquo; to &lsquo;z&rsquo;. An element can be present multiple times in a rock. An element is called a &lsquo;gem-element&rsquo; if it occurs at least once in each of the rocks.</p>

<p>Given the list of rocks with their compositions, display the number of gem-elements that exist in those rocks.</p>

<!--more-->


<ul>
<li>Input Format</li>
</ul>


<p>The first line consists of N, the number of rocks.
Each of the next N lines contain rocks' composition. Each composition consists of lowercase letters of English alphabet.</p>

<ul>
<li>Output Format</li>
</ul>


<p>Print the number gem-elements that exist in those rocks.</p>

<p>Constraints
<code>
1 ≤ N ≤ 100
Each composition consists of only small latin letters ('a'-'z').
1 ≤ Length of each composition ≤ 100
</code>
Sample Input</p>

<p><code>
3
abcdde
baccd
eeabg
</code>
Sample Output</p>

<p><code>
2
</code>
Explanation
Only &ldquo;a&rdquo;, &ldquo;b&rdquo; are the two kind of gem-elements, since these are the only characters that occur in each of the rocks' composition.</p>

<hr />

<p><strong>The Code</strong>:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string.h&gt;
using namespace std;

int main()
{
    int N;
    int ele[26];
    char str[100];
    while(cin&gt;&gt;N)
    {
        int sum = 0;
        for(int i=0;i&lt;26;i++)ele[i]=1;
        for(int i=0;i&lt;N;i++)
        {
            cin&gt;&gt;str;
            int len = strlen(str);
            for(int j=0;j&lt;len;j++)
                if(ele[str[j]-'a']!=0)
                ele[str[j]-'a']++;
            for(int k=0;k&lt;26;k++)
            {        
                if(ele[k]&gt;1)
                    ele[k]=1;
                else
                    ele[k]=0;
            } 
        } 
        for(int j=0;j&lt;26;j++)
                if(ele[j]==1)sum++;

           printf("%d\n",sum);
        }

    return 0;    
}

---
</code></pre>
]]></content>
  </entry>
  
</feed>
