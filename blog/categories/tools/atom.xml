<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Vintion's blog]]></title>
  <link href="http://mkdir1.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://mkdir1.github.io/"/>
  <updated>2014-08-13T10:24:50+08:00</updated>
  <id>http://mkdir1.github.io/</id>
  <author>
    <name><![CDATA[Vintion]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thunderbird下的muttator插件]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/25/thunderbirdxia-de-muttatorcha-jian/"/>
    <updated>2014-07-25T17:00:58+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/25/thunderbirdxia-de-muttatorcha-jian</id>
    <content type="html"><![CDATA[<h4>Thunderbird下的muttator</h4>

<p>在linux下工作，Thunderbird应该不可或缺．但是对于追求极简主义的人来说，用鼠标就是一种耻辱，简直就是浪费生命．虽然在chrome下有vimium，firefox下有vimperator，但是对于Thunderbird这一常见的应用，怎么可能没有一个与之匹配的神器呢？于是<br/>
Muttator横空出世．</p>

<!--more-->


<hr />

<h5>功能</h5>

<p>这就不必介绍了，大多数类vim插件，大同小异．记住不同点反而成了某个插件的特点了</p>

<p>需要注意的几点：</p>

<ol>
<li>在邮件中，用Ctrl+n/p上下选邮件列表中的项</li>
<li>Rss订阅中的每一篇文章，用vim上下切换</li>
<li>针对每一具体文章或者邮件，也是vim键操作</li>
<li>在这三个选项中切换用m来切，比如，从2切到3,用m,3到2用esc切</li>
<li>记几个常用的thunderbird快捷键:

<ul>
<li>F6面板切换</li>
<li>Ctro+o退出</li>
<li>F5接受所有消息</li>
<li>Ctrl++/&mdash;放大缩小</li>
<li>F回复邮件，hint功能</li>
</ul>
</li>
<li>其它功能有特发掘</li>
</ol>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cheat-sheet for Programmer]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/24/cheat-sheet-for-programmer/"/>
    <updated>2014-07-24T16:09:01+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/24/cheat-sheet-for-programmer</id>
    <content type="html"><![CDATA[<h4>useful cheat sheet for programmer</h4>

<p>I found a very useful sheets for programmer. Including almost everyaspects.</p>

<p>Here is the <a href="http://yuncode.net/article/a_5348e54c880e945">LINK</a></p>

<p>Thanks to the author.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell终端快捷键]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/23/shellzhong-duan-kuai-jie-jian/"/>
    <updated>2014-07-23T09:52:32+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/23/shellzhong-duan-kuai-jie-jian</id>
    <content type="html"><![CDATA[<h4>Shell下的快捷操作</h4>

<!--more-->


<p>黑色为常用的操作</p>

<p><strong>ctrl + d</strong>      删除光标所在位置上的字符相当于VIM里x或者dl</p>

<p>ctrl + h      删除光标所在位置前的字符相当于VIM里hx或者dh</p>

<p><strong>ctrl + k</strong>      删除光标后面所有字符相当于VIM里d shift+$</p>

<p><strong>ctrl + u</strong>      删除光标前面所有字符相当于VIM里d shift+^</p>

<p><strong>ctrl + w</strong>     删除光标前一个单词相当于VIM里db</p>

<p><strong>ctrl + y</strong>      恢复ctrl+u上次执行时删除的字符</p>

<p>ctrl + ?      撤消前一次输入</p>

<p>alt  + r      撤消前一次动作</p>

<p>alt  + d     删除光标所在位置的后单词</p>

<p>移动</p>

<p><strong>ctrl + a</strong>     将光标移动到命令行开头相当于VIM里shift+^</p>

<p><strong>ctrl + e</strong>     将光标移动到命令行结尾处相当于VIM里shift+$</p>

<p><strong>ctrl + f</strong>      光标向后移动一个字符相当于VIM里l</p>

<p><strong>ctrl + b</strong>     光标向前移动一个字符相当于VIM里h</p>

<p>ctrl + 方向键左键    光标移动到前一个单词开头</p>

<p>ctrl + 方向键右键    光标移动到后一个单词结尾</p>

<p><strong>ctrl + x</strong>       在上次光标所在字符和当前光标所在字符之间跳转</p>

<p>alt  + f      跳到光标所在位置单词尾部</p>

<p>替换</p>

<p><strong>ctrl + t</strong>       将光标当前字符与前面一个字符替换</p>

<p>alt  + t     交换两个光标当前所处位置单词和光标前一个单词</p>

<p>alt  + u     把光标当前位置单词变为大写</p>

<p>alt  + l      把光标当前位置单词变为小写</p>

<p>alt  + c      把光标当前位置单词头一个字母变为大写</p>

<p><strong>^oldstr ^newstr</strong>    替换前一次命令中字符串</p>

<p>历史命令编辑</p>

<p><strong>ctrl + p</strong>   返回上一次输入命令字符</p>

<p><strong>ctrl + r</strong>       输入单词搜索历史命令</p>

<p><strong>alt  + p</strong>     输入字符查找与字符相接近的历史命令</p>

<p>alt  + >     返回上一次执行命令</p>

<p>其它</p>

<p><strong>ctrl + s</strong>      锁住终端，貌似有些shell不可用</p>

<p><strong>ctrl + q</strong>      解锁终端</p>

<p><strong>ctrl + l</strong>        清屏相当于命令clear</p>

<p>ctrl + c       另起一行</p>

<p><strong>ctrl + i</strong>       类似TAB健补全功能</p>

<p>ctrl + o      重复执行命令</p>

<p>alt  + 数字键  操作的次数</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug工具]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/22/debuggong-ju/"/>
    <updated>2014-07-22T22:05:47+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/22/debuggong-ju</id>
    <content type="html"><![CDATA[<h4>Debug工具</h4>

<p>看到一内存调试工具，貌似很厉害，老夫居然前所未闻，今试之，感觉博大精深．</p>

<p>Valgrind, 用于内存测试，内存泄漏等，支持众多平台</p>

<!--more-->


<p>Debug绝对是和Code一样重要的技能，现在掌握的Debug技能真是乏善可陈，说来惭愧，之前在写一个驱动的时候，一直用的是printf类似的提示，可见见识浅短．</p>

<p>当然，GDB是常用的神器，功能强大</p>

<p>还有C中不注意的一处，宏：</p>

<p><strong>FILE</strong></p>

<p><strong>LINE</strong></p>

<p><strong>FUNC</strong></p>

<p>现记录一下，以后更新&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git常用命令]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/16/git/"/>
    <updated>2014-07-16T19:27:13+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/16/git</id>
    <content type="html"><![CDATA[<h4>Git常用命令</h4>

<p>Git命令很多，大多都可直接用git查询，有些用不上．常用的也就那几条，记录之．</p>

<!--more-->


<p>```
git diff/git diff &mdash;cached/git diff HEAD
git add -u 将本地改动的文件add
git add -A
git mv file1 file2
git add .
git commit -m'a'
git push origin source
git reset &mdash;hard HEAD^/HEAD^^/HEAD~100
git reset -hard ****
git log / git log &mdash;pretty=oneline
git reflog
git status</p>

<p>working directory工作区&mdash;&ndash;>版本库repository{stage/index暂存区, master};</p>

<p>git checkout &mdash;　file 丢弃工作区的修改，回到和暂存区一致
git reset　HEAD filename撤销暂存区中的修改，表示filename是最新的版本
误删rm文件后，可以git checkout &mdash; file
git rm file从版本库中删除，再git commit -m'&lsquo;或者rm file后再git rm file 再git commit -m&rsquo;'</p>

<p>本地仓库添加远程库git remote add origin url 远程库名叫origin
git push -u origin master(第一次推送)
git push orighin master</p>

<p>主分支master，提倡用分支来完成工作，再合并后删除
创建分支git checkout -b dev(b表示创建并切换)相当于git branch dev 和git checkout dev
git branch查看当前分支
git checkout master切回分支
git merge dev合并分支到master上
git branch -d dev 删除分支</p>

<p>git merge &mdash;no-ff -m"&ldquo; dev合并分支时禁用fast forward方式，这样分支的commit信息还会存在</p>

<p>git stash把当前工作现场储存起来
git stash list查看工作现场
git stash apply恢复，但stash内容不删除，需要git stash drop删除
git stash pop恢复并删除stash
git remote　－v 查看远程信息
git branch -D branchname强行删除分支
git push origin master推送分支master到远程
git pull把远程的提交抓下来，然后本地合并，解决冲突后再推送上去
一般分支master, dev, bug, featurejjj
git checkout -b dev origin/dev本地创建dev分支
git tag v1.0打标签
git tag查看tags
git tag name commitid -m'a'
git tag -d name 删除
git push origin name 推送某个
git psuh origin &mdash;tags推送所有</p>

<p>github上的pull　request申请后才可以pull上去
fork也可以pull
创建.gitignore文件，把要忽略的文件名放进去git会忽略</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
