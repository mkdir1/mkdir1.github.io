<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Vintion's blog]]></title>
  <link href="http://mkdir1.github.io/atom.xml" rel="self"/>
  <link href="http://mkdir1.github.io/"/>
  <updated>2014-08-18T17:38:42+08:00</updated>
  <id>http://mkdir1.github.io/</id>
  <author>
    <name><![CDATA[Vintion]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[进制转化]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/18/jin-zhi-zhuan-hua/"/>
    <updated>2014-08-18T17:35:10+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/18/jin-zhi-zhuan-hua</id>
    <content type="html"><![CDATA[<h4>进制转化</h4>

<p>改进了一下进制转化的代码，每次都有进步</p>

<!--more-->


<h5>Code</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include&lt;stdio.h&gt;
</span><span class='line'>#include&lt;string.h&gt;
</span><span class='line'>
</span><span class='line'>char result[1000];
</span><span class='line'>static int Name[36]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
</span><span class='line'>
</span><span class='line'>void reverse(char *p)
</span><span class='line'>{
</span><span class='line'>    int len = strlen(p);
</span><span class='line'>    int i = 0;
</span><span class='line'>    int j = len-1;
</span><span class='line'>    char ch;
</span><span class='line'>    while(i&lt;j)
</span><span class='line'>    {
</span><span class='line'>        ch = p[i];
</span><span class='line'>        p[i] = p[j];
</span><span class='line'>        p[j] = ch;
</span><span class='line'>        i++;
</span><span class='line'>        j--;
</span><span class='line'>    }
</span><span class='line'>    return;
</span><span class='line'>}
</span><span class='line'>void conver(int n, int m)  
</span><span class='line'>{
</span><span class='line'>    int signal = 0;
</span><span class='line'>    int i = 0;
</span><span class='line'>    if(n&lt;0)
</span><span class='line'>    {
</span><span class='line'>        n = -n;
</span><span class='line'>        signal = -1;
</span><span class='line'>        i= 1;
</span><span class='line'>    }
</span><span class='line'>    while(n/m!=0)
</span><span class='line'>    {
</span><span class='line'>        result[i++] = Name[n%m];
</span><span class='line'>        n = n/m;
</span><span class='line'>    }
</span><span class='line'>    result[i] = Name[n];
</span><span class='line'>    result[i+1] = 0;
</span><span class='line'>    if(signal==-1)
</span><span class='line'>    {
</span><span class='line'>        result[0] = '-';
</span><span class='line'>        reverse(result+1);
</span><span class='line'>    }
</span><span class='line'>    else
</span><span class='line'>        reverse(result);
</span><span class='line'>    printf("%s\n",result);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    int n,m;
</span><span class='line'>    while(~scanf("%d %d",&n,&m))
</span><span class='line'>        conver(n,m);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>将十进制n转化成m进制的字符串输出
这里还可以进一步的是，将十进制的字符串
void conver(char *n, int m)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu上安装CUDA]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/14/ubuntushang-an-zhuang-cuda/"/>
    <updated>2014-08-14T01:41:56+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/14/ubuntushang-an-zhuang-cuda</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机体系结构量化研究方法1]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/13/ji-suan-ji-ti-xi-jie-gou-liang-hua-yan-jiu-fang-fa-1/"/>
    <updated>2014-08-13T20:42:27+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/13/ji-suan-ji-ti-xi-jie-gou-liang-hua-yan-jiu-fang-fa-1</id>
    <content type="html"><![CDATA[<h4>计算机体系结构量化研究方法1</h4>

<p>经典重读，温故知新．<br/>
突然发现，此乃本人专业，竟陌生如此</p>

<!--more-->


<h5>第一章　量化设计与分析基础</h5>

<ol>
<li>计算机生产技术的发展和计算机设计技术的创新</li>
<li>新体系结构商业成功源于人们不再使用汇编语言进行编程，降低了对目标代码兼容性的要求；出现了独立于厂商的标准化操作系统</li>
<li>RISC精简指令集系统，80年代出现，使设计人员专注于两方面的研究：指令级并行（流水线，多指令发射）；缓存的使用</li>
<li>Intel是将80x86指令转化为类似于RISC的指令，由于晶体管数量的飞速发展，再转化成RISC指令时的硬件开销可忽略不计，但在低端应用中，这种转化开销带来的开销与硅面积成本，使得ARM成为了主流，这也是一种RISC体系结构</li>
<li>现在的大型计算机和高性能超级计算机也是由微处理器组合而成的</li>
<li>SPEC基准测试</li>
<li>计算机体系结构和技术改进</li>
<li>即时编译器Just-in-time和跟踪编译Trace-based compiling正在替代传统的编译器和链接器</li>
<li>因特网上的软件即服务Software as a Service正在取代必须在本地计算机上安装的盒装光盘套装软件</li>
<li>风冷芯片最大功耗和无法有效地开发更多指令级并行这两大孪生瓶颈使得单核处理器性能不能快速的提高，多核成为了主流</li>
<li>处理器性能的提高从单纯的依赖指令级并行ILP到转向数据级并行DLP和线程级并行TLP</li>
<li>个人移动设备PMD</li>
<li>响应性能和可预测性能是多媒体应用程序的关键特性</li>
<li>针对服务器，可用性至关重要，高吞吐量</li>
<li>最大规模集群，仓库级计算机WSC</li>
<li>多种级别的并行度现在已经成为计算机设计的推动力量，而能耗和成本则是主要的约束条件</li>
<li>应用程序中主要有两种并行：数据级并行DLP和任务级并行TLP</li>
<li>计算机硬件四种方式：指令级并行／向量体系结构和图行处理器GPU／线程级并行／请求级并行</li>
<li>分类：单指令流单数据流SISD/单指令流多数据流SIMD／多指令流单数据流MISD（暂无）／多指令流多数据流MIMD</li>
<li>指令集设计，功能组织，逻辑设计，实现方式(集成电路设计，包装，电池，冷却..)</li>
<li>指令集体系结构ISA</li>
<li>MIPS  80x86 ARM MIPS64指令集</li>
<li>存储器寻指，都是按字节寻指</li>
<li>寻指模式．例MIPS寻指模式：寄存器寻指，立即数寻指，位移量寻址</li>
<li>操作数的类型和大小</li>
<li>操作指令：数据传输，逻辑运算，算术运算．．．</li>
<li>控制流指令：条件转移，无条件跳转，过程调用，返回等</li>
<li>ISA编码：固定长度和可变长度;ARM和MIPS都是32位指令长度，80x86可变</li>
<li>组成和硬件，组成也叫微体系结构；指令级相同但组成不同的处理器如：AMD Opteron和Intel Core i7</li>
<li>同一系列的计算机通常具有相同的指令集体系结构和几乎相同的组成，但提供不同的存储系统和时钟速率</li>
<li>集成电路逻辑技术；半导体DRAM；半导体闪存；磁盘技术；网络技术</li>
<li>集成电路工艺用特征尺寸来衡量：一个晶体管或一条连线在x或y方向上的最小尺寸，目前2011达到32nm,22nm</li>
<li>晶体管的性能提高大体上与特征尺寸的下降成线性关系，晶体管数目以平方增长</li>
<li>一段连线的信号延迟与其电阻，电容的乘积成正比，特征尺寸缩小时，连线变短，单位长度的电阻和电容都会变差</li>
<li>一般来说，与晶体管性能相比，连线延迟方面的改进小得可怜，增加了设计人员面临的挑战，连线延迟已经成为了大型集成电路的主要设计限制，往往比晶体管开关延迟还要关键，越来越多的时钟周期被消耗在信号在连线上的传播延迟上</li>
<li>功率是设计人员面临的最大挑战：功率引入芯片进行分配，而为仅仅为电源和接地就使用了数以百万计的晶体管和多个互连层；功率以热的形式耗散，必须消除
1.性能，功率，能耗</li>
<li>持续功耗，用热设计功耗TDP来度量，决定冷却需求．TDP不是峰值功率，峰值功率大约是其1.5倍</li>
<li>对于CMOS芯片来说，传统的主要能耗是开关晶体管，也叫动态能耗</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next Second]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/13/next-second/"/>
    <updated>2014-08-13T10:23:05+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/13/next-second</id>
    <content type="html"><![CDATA[<h4>求下一秒</h4>

<p>给定一个时间，求下一秒是什么时间</p>

<!--more-->


<h5>code</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>
</span><span class='line'>bool NextSec(int *nYear,int *nMonth,int *nDate,int *nHour,int *nMinute,int *nSecond)
</span><span class='line'>{
</span><span class='line'>  if(*nYear&lt;0 || *nMonth&gt;12 || *nMonth&lt;0 || *nHour&gt;23 || *nHour&lt;0 || *nMinute&lt;0 || *nMinute&gt;59 || *nSecond&lt;0 || *nSecond&gt;59) 
</span><span class='line'>    return false;
</span><span class='line'>  int nDays;
</span><span class='line'>  switch(*nMonth)
</span><span class='line'>  {
</span><span class='line'>  case 1:
</span><span class='line'>  case 3:
</span><span class='line'>  case 5:
</span><span class='line'>  case 7:
</span><span class='line'>  case 8:
</span><span class='line'>  case 10:
</span><span class='line'>  case 12:
</span><span class='line'>    nDays=31;
</span><span class='line'>    break;
</span><span class='line'>  case 2:// 判断闰年
</span><span class='line'>    if(*nYear%400==0|| (*nYear%100!=0&&*nYear%4==0)) {
</span><span class='line'>        nDays=29;
</span><span class='line'>    }
</span><span class='line'>    else {
</span><span class='line'>        nDays=28;
</span><span class='line'>    }
</span><span class='line'>    break;
</span><span class='line'>  default:
</span><span class='line'>    nDays=30;
</span><span class='line'>    break;
</span><span class='line'>  }
</span><span class='line'>  if(*nDate&lt;0 || *nDate&gt;nDays) 
</span><span class='line'>    return false;
</span><span class='line'>
</span><span class='line'>  (*nSecond)++;  // 秒加1
</span><span class='line'>  if(*nSecond&gt;=60) // 秒满60，做出特殊处理，下面时，日，月等类同
</span><span class='line'>  {
</span><span class='line'>    *nSecond=0;
</span><span class='line'>    (*nMinute)++;
</span><span class='line'>    if(*nMinute&gt;=60) 
</span><span class='line'>    {
</span><span class='line'>        *nMinute=0;
</span><span class='line'>        (*nHour)++;
</span><span class='line'>        if(*nHour&gt;=24)
</span><span class='line'>        {
</span><span class='line'>            *nHour=0;
</span><span class='line'>            (*nDate)++;
</span><span class='line'>            if(*nDate&gt;nDays)
</span><span class='line'>            {
</span><span class='line'>                *nDate=1;
</span><span class='line'>                (*nMonth)++;
</span><span class='line'>                if(*nMonth&gt;12)
</span><span class='line'>                {
</span><span class='line'>                    *nMonth=1;
</span><span class='line'>                    (*nYear)++;
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  return true;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>  int nYear=2004,nMonth=12,nDate=31,nHour=23,nMinute=59,nSecond=59;
</span><span class='line'>  bool res = NextSec(&nYear,&nMonth,&nDate,&nHour,&nMinute,&nSecond);
</span><span class='line'>  if(res)
</span><span class='line'>    printf("The result:%d-%d-%d %d:%d:%d",nYear,nMonth,nDate,nHour,nMinute,nSecond);
</span><span class='line'>  else
</span><span class='line'>    printf("Input error!/n");
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Itoa]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/12/itoa/"/>
    <updated>2014-08-12T16:05:35+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/12/itoa</id>
    <content type="html"><![CDATA[<h4>ITOA</h4>

<p>一个很实现十进制整数转变成任意2-16进制字符串的代码，写得短小精练，原作者确实厉害，叹服</p>

<!--more-->


<h5>code</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>char *my_itoa(int value, int radix) {
</span><span class='line'>  static char buf[32] = {0};
</span><span class='line'>  int i = 30;
</span><span class='line'>  for(;value&&(i&gt;=0);--i,value/=radix) {
</span><span class='line'>      buf[i] = "0123456789abcdef"[value%radix];
</span><span class='line'>  }
</span><span class='line'>  return &buf[i+1];
</span><span class='line'>}
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    int val, radix;
</span><span class='line'>    while(~scanf("%d %d",&val,&radix))
</span><span class='line'>        printf("%s\n",my_itoa(val,radix));
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>仔细体会一下，　enjoy coding&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端rss集合]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/30/qian-duan-rssji-he/"/>
    <updated>2014-07-30T02:31:37+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/30/qian-duan-rssji-he</id>
    <content type="html"><![CDATA[<h4>前端rss集合</h4>

<p>在github上偶然发现一个前端的rss资源，丰富详实，大有裨益．发现此项目作者很早就建立了，居然好东西现在才发觉．<br/>
原资源<a href="https://github.com/impressivewebs/frontend-feeds.git">https://github.com/impressivewebs/frontend-feeds.git</a> 可直接git clone 得到，添加到rss中即可</p>

<!--more-->


<h5>添加方法</h5>

<p>在rss阅读器中，导入xml文件即可
或者在浏览器中打开此xml文件也可导入到浏览器中</p>

<hr />

<h5>仿照制作</h5>

<p>受作者启发，实际上本人也可以做一个自己的rss开源库，这样，当环境迁移或项目变化，都可以马上把自己的数据同步更新过来，岂不很方便．</p>

<hr />

<h5>我的开源</h5>

<p>To be continue&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode-copy List With Random Pointer]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/28/leetcode-copy-list-with-random-pointer/"/>
    <updated>2014-07-28T00:53:19+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/28/leetcode-copy-list-with-random-pointer</id>
    <content type="html"><![CDATA[<h4>Copy List with random pointer</h4>

<p>这题早就看过，解法也知道，但是，想法与代码差距很大，半天都没发现错误．还得多多练习</p>

<!--more-->


<h5>Problem</h5>

<p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>

<p>Return a deep copy of the list.</p>

<h5>code:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Definition for singly-linked list with a random pointer.</span>
</span><span class='line'><span class="cm"> * struct RandomListNode {</span>
</span><span class='line'><span class="cm"> *     int label;</span>
</span><span class='line'><span class="cm"> *     RandomListNode *next, *random;</span>
</span><span class='line'><span class="cm"> *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}</span>
</span><span class='line'><span class="cm"> * };</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span><span class='line'><span class="nl">public:</span>
</span><span class='line'>    <span class="n">RandomListNode</span> <span class="o">*</span><span class="n">copyRandomList</span><span class="p">(</span><span class="n">RandomListNode</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">RandomListNode</span> <span class="o">*</span><span class="n">Head</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">NULL</span><span class="o">==</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="n">RandomListNode</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span><span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="nb">NULL</span><span class="o">!=</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomListNode</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">label</span><span class="p">);</span>
</span><span class='line'>            <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="nb">NULL</span><span class="o">!=</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">random</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span> <span class="c1">//　这里可能为空</span>
</span><span class='line'>                <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">random</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">random</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">random</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>             <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">Head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="n">q</span> <span class="o">=</span> <span class="n">Head</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">NULL</span><span class="o">==</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Head</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="nb">NULL</span><span class="o">!=</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span>  <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>            <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>       <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span><span class="c1">// 这里要断开</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Head</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>两处注释的地方，瞪大眼睛都没看出来．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[leetcode-4Sum]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/27/leetcode-4sum/"/>
    <updated>2014-07-27T16:14:07+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/27/leetcode-4sum</id>
    <content type="html"><![CDATA[<h4><a href="https://oj.leetcode.com/problems/4sum/">Leetcode-4Sum</a></h4>

<hr />

<p>此题不难，但编码起来，许多细节需要注意．wrong了好多次，发现有两处画蛇添足，良久才恍然大悟．<br/>
有时候，思维逻辑正确，也不能保证编码不出小差错．</p>

<!--more-->


<h5>Problem:</h5>

<p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>

<p>Note:
Elements in a quadruplet <code>(a,b,c,d)</code> must be in non-descending order. <code>(ie, a ≤ b ≤ c ≤ d)</code></p>

<p>The solution set must not contain duplicate quadruplets.</p>

<pre><code>For example, given array S = {1 0 -1 0 -2 2}, and target = 0.
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A solution set is:
</span><span class='line'>(-1,  0, 0, 1)
</span><span class='line'>(-2, -1, 1, 2)
</span><span class='line'>(-2,  0, 0, 2)</span></code></pre></td></tr></table></div></figure>


<h5>Code:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span><span class='line'><span class="nl">public:</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">fourSum</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">num</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">num</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>        <span class="n">sort</span><span class="p">(</span><span class="n">num</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">num</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="p">;</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">-</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="c1">//  i++;</span>
</span><span class='line'>                <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">len</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">j</span><span class="o">&gt;</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                   <span class="c1">// j++;</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">l</span> <span class="o">=</span> <span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">while</span><span class="p">(</span><span class="n">l</span><span class="o">&gt;</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">num</span><span class="p">[</span><span class="n">l</span><span class="p">]</span><span class="o">==</span><span class="n">num</span><span class="p">[</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">l</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="o">&gt;</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">num</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">==</span><span class="n">num</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">sum</span> <span class="o">=</span> <span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="n">num</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">+</span><span class="n">num</span><span class="p">[</span><span class="n">l</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">sum</span><span class="o">&gt;</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">l</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">sum</span><span class="o">&lt;</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>                    <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>                    <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
</span><span class='line'>                    <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">l</span><span class="p">]);</span>
</span><span class='line'>                    <span class="n">result</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">vec</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">vec</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thunderbird下的muttator插件]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/25/thunderbirdxia-de-muttatorcha-jian/"/>
    <updated>2014-07-25T17:00:58+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/25/thunderbirdxia-de-muttatorcha-jian</id>
    <content type="html"><![CDATA[<h4>Thunderbird下的muttator</h4>

<p>在linux下工作，Thunderbird应该不可或缺．但是对于追求极简主义的人来说，用鼠标就是一种耻辱，简直就是浪费生命．虽然在chrome下有vimium，firefox下有vimperator，但是对于Thunderbird这一常见的应用，怎么可能没有一个与之匹配的神器呢？于是<br/>
Muttator横空出世．</p>

<!--more-->


<hr />

<h5>功能</h5>

<p>这就不必介绍了，大多数类vim插件，大同小异．记住不同点反而成了某个插件的特点了</p>

<p>需要注意的几点：</p>

<ol>
<li>在邮件中，用Ctrl+n/p上下选邮件列表中的项</li>
<li>Rss订阅中的每一篇文章，用vim上下切换</li>
<li>针对每一具体文章或者邮件，也是vim键操作</li>
<li>在这三个选项中切换用m来切，比如，从2切到3,用m,3到2用esc切</li>
<li>记几个常用的thunderbird快捷键:

<ul>
<li>F6面板切换</li>
<li>Ctro+o退出</li>
<li>F5接受所有消息</li>
<li>Ctrl++/&mdash;放大缩小</li>
<li>F回复邮件，hint功能</li>
</ul>
</li>
<li>其它功能有特发掘</li>
</ol>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM 重定向]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/25/acm-zhong-ding-xiang/"/>
    <updated>2014-07-25T09:07:06+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/25/acm-zhong-ding-xiang</id>
    <content type="html"><![CDATA[<h4>ACM输入输出重定向</h4>

<p>问题描述：<br/>
在做ACM题时，对于输入输出，总需要键盘来操作，这样显然不方向，对于多数据的测试，显然不合理，现有一个实用的重定向函数，可很好解决.</p>

<!--more-->


<h5>解决</h5>

<p>首先，gcc中有一个－D选项，这样表示在文件中添加宏定义</p>

<pre><code>gcc -o example example.c -D TAG
</code></pre>

<p>在正文中添加</p>

<pre><code>#ifndef TAG
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt+", stdout);
#endif
</code></pre>

<p>这样，就直接可以重定向到两个文件中．</p>

<p>包含在<code>#include&lt;stdio.h&gt;</code>中</p>

<hr />

<h5>另外</h5>

<p>在windows下找到一个解决方案，有bat文件中<code>example.exe&lt;input.txt&gt;output.txt</code> 不过，一般有IDE中就解决了，不必这么麻烦~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程名言名句]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/24/bian-cheng-ming-yan-ming-ju/"/>
    <updated>2014-07-24T16:25:05+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/24/bian-cheng-ming-yan-ming-ju</id>
    <content type="html"><![CDATA[<h4>编程名言</h4>

<!--more-->


<p>UNIX 很简单。但需要有一定天赋的人才能理解这种简单。 Dennis Ritchie</p>

<p>软件在能够复用前必须先能用。
　　–Ralph Johnson</p>

<p>优秀的判断力来自经验，但经验来自于错误的判断。
　　–Fred Brooks</p>

<p>‘理论’是你知道是这样，但它却不好用。‘实践’是它很好用，但你不知道是为什么。程序员将理论和实践结合到一起：既不好用，也不知道是为什么。
　　–佚名</p>

<p>当你想在你的代码中找到一个错误时，这很难；当你认为你的代码是不会有错误时，这就更难了。
　　-Steve McConnell 《代码大全》</p>

<p>如果建筑工人盖房子的方式跟程序员写程序一样，那第一只飞来的啄木鸟就将毁掉人类文明。
　　-Gerald Weinberg</p>

<p>项目开发的六个阶段：</p>

<p>充满热情</p>

<p>醒悟</p>

<p>痛苦</p>

<p>找出罪魁祸首</p>

<p>惩罚无辜</p>

<p>褒奖闲人</p>

<p>　　–佚名</p>

<p>优秀的代码是它自己最好的文档。当你考虑要添加一个注释时，问问自己，“如何能改进这段代码，以让它不需要注释？”</p>

<p>　　-Steve McConnell 《代码大全》</p>

<p>我们这个世界的一个问题是，蠢人信誓旦旦，智人满腹狐疑。</p>

<p>　　–Bertrand Russell</p>

<p>无论在排练中演示是如何的顺利(高效)，当面对真正的现场观众时，出现错误的可能性跟在场观看的人数成正比。</p>

<p>　　–佚名</p>

<p>罗马帝国崩溃的一个主要原因是，没有0，他们没有有效的方法表示他们的C程序成功的终止。</p>

<p>　　–Robert Firth</p>

<p>C程序员永远不会灭亡。他们只是 cast 成了 void。</p>

<p>　　–佚名</p>

<p>如果 debugging 是一种消灭 bug 的过程，那编程就一定是把 bug 放进去的过程。</p>

<p>　　–Edsger Dijkstra</p>

<p>你要么要软件质量，要么要指针算法；两者不可兼得。</p>

<p>(Bertrand Meyer)</p>

<p>有两种方法能写出没有错误的程序；但只有第三种好用。
–Alan J. Perlis</p>

<p>用代码行数来测评软件开发进度，就相对于用重量来计算飞机建造进度。
–比尔-盖茨</p>

<p>最初的 90% 的代码用去了最初 90% 的开发时间。余下的 10% 的代码用掉另外 90% 的开发时间。
–Tom Cargill</p>

<p>程序员和上帝打赌要开发出更大更好——傻瓜都会用的软件。而上帝却总能创造出更大更傻的傻瓜。所以，上帝总能赢。
–Anon</p>

<p>Talk is cheap, show me your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cheat-sheet for Programmer]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/24/cheat-sheet-for-programmer/"/>
    <updated>2014-07-24T16:09:01+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/24/cheat-sheet-for-programmer</id>
    <content type="html"><![CDATA[<h4>useful cheat sheet for programmer</h4>

<p>I found a very useful sheets for programmer. Including almost everyaspects.</p>

<p>Here is the <a href="http://yuncode.net/article/a_5348e54c880e945">LINK</a></p>

<p>Thanks to the author.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell终端快捷键]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/23/shellzhong-duan-kuai-jie-jian/"/>
    <updated>2014-07-23T09:52:32+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/23/shellzhong-duan-kuai-jie-jian</id>
    <content type="html"><![CDATA[<h4>Shell下的快捷操作</h4>

<!--more-->


<p>黑色为常用的操作</p>

<p><strong>ctrl + d</strong>      删除光标所在位置上的字符相当于VIM里x或者dl</p>

<p>ctrl + h      删除光标所在位置前的字符相当于VIM里hx或者dh</p>

<p><strong>ctrl + k</strong>      删除光标后面所有字符相当于VIM里d shift+$</p>

<p><strong>ctrl + u</strong>      删除光标前面所有字符相当于VIM里d shift+^</p>

<p><strong>ctrl + w</strong>     删除光标前一个单词相当于VIM里db</p>

<p><strong>ctrl + y</strong>      恢复ctrl+u上次执行时删除的字符</p>

<p>ctrl + ?      撤消前一次输入</p>

<p>alt  + r      撤消前一次动作</p>

<p>alt  + d     删除光标所在位置的后单词</p>

<p>移动</p>

<p><strong>ctrl + a</strong>     将光标移动到命令行开头相当于VIM里shift+^</p>

<p><strong>ctrl + e</strong>     将光标移动到命令行结尾处相当于VIM里shift+$</p>

<p><strong>ctrl + f</strong>      光标向后移动一个字符相当于VIM里l</p>

<p><strong>ctrl + b</strong>     光标向前移动一个字符相当于VIM里h</p>

<p>ctrl + 方向键左键    光标移动到前一个单词开头</p>

<p>ctrl + 方向键右键    光标移动到后一个单词结尾</p>

<p><strong>ctrl + x</strong>       在上次光标所在字符和当前光标所在字符之间跳转</p>

<p>alt  + f      跳到光标所在位置单词尾部</p>

<p>替换</p>

<p><strong>ctrl + t</strong>       将光标当前字符与前面一个字符替换</p>

<p>alt  + t     交换两个光标当前所处位置单词和光标前一个单词</p>

<p>alt  + u     把光标当前位置单词变为大写</p>

<p>alt  + l      把光标当前位置单词变为小写</p>

<p>alt  + c      把光标当前位置单词头一个字母变为大写</p>

<p><strong>^oldstr ^newstr</strong>    替换前一次命令中字符串</p>

<p>历史命令编辑</p>

<p><strong>ctrl + p</strong>   返回上一次输入命令字符</p>

<p><strong>ctrl + r</strong>       输入单词搜索历史命令</p>

<p><strong>alt  + p</strong>     输入字符查找与字符相接近的历史命令</p>

<p>alt  + >     返回上一次执行命令</p>

<p>其它</p>

<p><strong>ctrl + s</strong>      锁住终端，貌似有些shell不可用</p>

<p><strong>ctrl + q</strong>      解锁终端</p>

<p><strong>ctrl + l</strong>        清屏相当于命令clear</p>

<p>ctrl + c       另起一行</p>

<p><strong>ctrl + i</strong>       类似TAB健补全功能</p>

<p>ctrl + o      重复执行命令</p>

<p>alt  + 数字键  操作的次数</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向对象的5个基本原则]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/23/mian-xiang-dui-xiang-de-5ge-ji-ben-yuan-ze/"/>
    <updated>2014-07-23T09:20:56+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/23/mian-xiang-dui-xiang-de-5ge-ji-ben-yuan-ze</id>
    <content type="html"><![CDATA[<h4>面向对象的5个基本原则</h4>

<p>1、单一职责原则</p>

<p>一个类只做一件事</p>

<p>2、开放封闭原则</p>

<p>可扩展但还是不可修改</p>

<p>3、替换原则</p>

<p>子类替换父类</p>

<p>4、依赖倒置原则</p>

<p>高层不依赖低层</p>

<p>5、接口隔离原则</p>

<p>小接口代大接口</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug工具]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/22/debuggong-ju/"/>
    <updated>2014-07-22T22:05:47+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/22/debuggong-ju</id>
    <content type="html"><![CDATA[<h4>Debug工具</h4>

<p>看到一内存调试工具，貌似很厉害，老夫居然前所未闻，今试之，感觉博大精深．</p>

<p>Valgrind, 用于内存测试，内存泄漏等，支持众多平台</p>

<!--more-->


<p>Debug绝对是和Code一样重要的技能，现在掌握的Debug技能真是乏善可陈，说来惭愧，之前在写一个驱动的时候，一直用的是printf类似的提示，可见见识浅短．</p>

<p>当然，GDB是常用的神器，功能强大</p>

<p>还有C中不注意的一处，宏：</p>

<p><strong>FILE</strong></p>

<p><strong>LINE</strong></p>

<p><strong>FUNC</strong></p>

<p>现记录一下，以后更新&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sudoku-solver]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/22/sudoku-solver/"/>
    <updated>2014-07-22T20:27:47+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/22/sudoku-solver</id>
    <content type="html"><![CDATA[<h4>Sudoku Solver</h4>

<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>

<p>Empty cells are indicated by the character &lsquo;.&rsquo;.</p>

<p>You may assume that there will be only one unique solution.</p>

<!--more-->


<p>递归的方法，确实不错～　</p>

<h5>Code</h5>

<pre><code>bool isValid(vector&lt;vector&lt;char&gt; &gt; &amp;board, int a, int b) {
        int i,j;
        for(i = 0; i &lt; 9; i++)
            if(i != a &amp;&amp; board[i][b] == board[a][b])
                return false;

        for(j = 0; j &lt; 9; j++)
            if(j != b &amp;&amp; board[a][j] == board[a][b])
                return false;

        int x = a/3*3;
        int y = b/3*3;
        for(i = 0; i &lt; 3; i++)
            for(j = 0; j&lt; 3; j++)
                if(x+i != a &amp;&amp; y+j != b &amp;&amp; board[x+i][y+j] == board[a][b])
                    return false;
        return true;
    }
    bool solveSudokudfs(vector&lt;vector&lt;char&gt; &gt; &amp;board)
    {
        for(int i = 0; i &lt; 9; i++)
            for(int j = 0; j &lt; 9; j++)
            {
                if(board[i][j] == '.')
                {
                    for(int k = 1; k &lt;= 9; k++)
                    {
                        board[i][j] = '0' + k;
                        if(isValid(board,i,j) &amp;&amp; solveSudokudfs(board))
                            return true;
                        board[i][j] = '.';
                    }
                    return false;
                }
            }
        return true;
    }
    void solveSudoku(vector&lt;vector&lt;char&gt; &gt; &amp;board) {
        // Note: The Solution object is instantiated only once.
        solveSudokudfs(board);
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valid-sudoku]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/22/valid-sudoku/"/>
    <updated>2014-07-22T19:56:41+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/22/valid-sudoku</id>
    <content type="html"><![CDATA[<h4>Valid Sudoku</h4>

<p>The Sudoku board could be partially filled, where empty cells are filled with the character &lsquo;.&rsquo;.</p>

<p>A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.</p>

<p>我这解法，绝对是对算法的侮辱～　哈哈</p>

<!--more-->


<p>Code:</p>

<pre><code>class Solution {
public:
    bool isValidSudoku(vector&lt;vector&lt;char&gt; &gt; &amp;board) 
    {
        for(int i=0;i&lt;9;i++)
        for(int j=0;j&lt;9;j++)
        {
            if(board[i][j]=='.')
                continue;
            for(int k=j+1;k&lt;9;k++)
                if(board[i][j]==board[i][k])return false;
            for(int k=i+1;k&lt;9;k++)
                if(board[i][j]==board[k][j])return false;
            if(i%3==0&amp;&amp;j%3==0)
            {
                if(board[i+1][j+1]!='.'&amp;&amp;board[i+1][j+1]==board[i][j])return false;
                if(board[i+2][j+1]!='.'&amp;&amp;board[i+2][j+1]==board[i][j])return false;
                if(board[i+1][j+2]!='.'&amp;&amp;board[i+1][j+2]==board[i][j])return false;
                if(board[i+2][j+2]!='.'&amp;&amp;board[i+2][j+2]==board[i][j])return false;
            }
            if(i%3==0&amp;&amp;(j-1)%3==0)
            {
                if(board[i+1][j-1]!='.'&amp;&amp;board[i+1][j-1]==board[i][j])return false;
                if(board[i+2][j-1]!='.'&amp;&amp;board[i+2][j-1]==board[i][j])return false;
                if(board[i+1][j+1]!='.'&amp;&amp;board[i+1][j+1]==board[i][j])return false;
                if(board[i+2][j+1]!='.'&amp;&amp;board[i+2][j+1]==board[i][j])return false;   
            }
            if(i%3==0&amp;&amp;(j+1)%3==0)
            {
                if(board[i+1][j-1]!='.'&amp;&amp;board[i+1][j-1]==board[i][j])return false;
                if(board[i+2][j-1]!='.'&amp;&amp;board[i+2][j-1]==board[i][j])return false;
                if(board[i+1][j-2]!='.'&amp;&amp;board[i+1][j-2]==board[i][j])return false;
                if(board[i+2][j-2]!='.'&amp;&amp;board[i+2][j-2]==board[i][j])return false;   
            }
            if((i-1)%3==0&amp;&amp;j%3==0)
            {
                if(board[i+1][j+1]!='.'&amp;&amp;board[i+1][j+1]==board[i][j])return false;
                if(board[i+1][j+2]!='.'&amp;&amp;board[i+1][j+2]==board[i][j])return false;
            }
            if((i-1)%3==0&amp;&amp;(j-1)%3==0)
            {
                if(board[i+1][j-1]!='.'&amp;&amp;board[i+1][j-1]==board[i][j])return false;
                if(board[i+1][j+1]!='.'&amp;&amp;board[i+1][j+1]==board[i][j])return false;
            }
             if((i-1)%3==0&amp;&amp;(j+1)%3==0)
            {
                if(board[i+1][j-1]!='.'&amp;&amp;board[i+1][j-1]==board[i][j])return false;
                if(board[i+1][j-2]!='.'&amp;&amp;board[i+1][j-2]==board[i][j])return false;
            }

        }
        return true;
    }
};
</code></pre>

<p>好吧，管用就行，一遍过需要多仔细认真啊</p>

<p>这样代码还是很好看的，就是有点长</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode-combination Sum]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/22/leetcode-combination-sum/"/>
    <updated>2014-07-22T17:05:12+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/22/leetcode-combination-sum</id>
    <content type="html"><![CDATA[<h4>Combination Sum</h4>

<p>Given a set of candidate numbers &copy; and a target number (T), find all unique combinations in C where the candidate numbers sums to T.</p>

<p>The same repeated number may be chosen from C unlimited number of times.</p>

<p>Note:</p>

<p>All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).</p>

<p>The solution set must not contain duplicate combinations.
For example, given candidate set 2,3,6,7 and target 7,
A solution set is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2,3,6,7] 7
</span><span class='line'>[7] 
</span><span class='line'>[2, 2, 3] 
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>这题真是基础，之前一直对此类不知所措，现在略通一二，甚喜</p>

<p>Code:</p>

<pre><code>class Solution {
public:
    void Getcom(vector&lt;int&gt;&amp;can, int target, vector&lt;vector&lt;int&gt;&gt;&amp;result, int level, int &amp;sumcurrent, int nsize, vector&lt;int&gt;&amp;tmp)
    {
        if(sumcurrent&gt;target)return;
        if(target==sumcurrent)
        {
            result.push_back(tmp);
            return;
        }
        for(int i=level;i&lt;nsize;i++)
        {

                sumcurrent += can[i];
                tmp.push_back(can[i]);
                Getcom(can,target,result,i,sumcurrent,nsize,tmp);
                tmp.pop_back();
                sumcurrent -=can[i];
        }

    }
    vector&lt;vector&lt;int&gt; &gt; combinationSum(vector&lt;int&gt; &amp;candidates, int target) 
    {
       vector&lt;vector&lt;int&gt;&gt; result;
       vector&lt;int&gt;tmp;
       int size = candidates.size();
       sort(candidates.begin(),candidates.end());
       int sumc = 0;
       Getcom(candidates,target,result,0,sumc,size,tmp);
       return result;
    }
};
</code></pre>

<p>DFS方便记录结果，DP方便记数</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP入门]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/20/phpru-men/"/>
    <updated>2014-07-20T13:18:28+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/20/phpru-men</id>
    <content type="html"><![CDATA[<h4>PHP入门</h4>

<p>前端的几门语言，HTML/CSS/JavaScript/XML等，这些语言有很大的关联性，很多都是相通相互使用的．入门后，至少可以阅读源码，这样对理解和布局帮助很大．</p>

<p>至于高级技巧和应用，如果从事前端的开发，那就要精通了，这里只对本人初学入门所用，仅对基本语法和代码阅读无碍即可．</p>

<!--more-->


<h5>介绍与特点</h5>

<ul>
<li>1.PHP脚本是在服务器上执行</li>
<li>2.PHP Hypertext Preprocessor</li>
<li>3.开源脚本语言，可免费下载，相对于微软的ASP，其是收费的，</li>
<li>4.PHP文件能包含文本，HTML, CSS以及PHP代码</li>
<li>5.PHP在服务器上运行，结果以纯文本返回浏览器</li>
<li><ol>
<li>PHP文件后缀.php</li>
</ol>
</li>
</ul>


<h5>PHP能够做什么　</h5>

<ul>
<li>1.PHP 能够生成动态页面内容</li>
<li>2.PHP 能够创建、打开、读取、写入、删除以及关闭服务器上的文件</li>
<li>3.PHP 能够接收表单数据</li>
<li>4.PHP 能够发送并取回 cookies</li>
<li>5.PHP 能够添加、删除、修改数据库中的数据</li>
<li>6.PHP 能够限制用户访问网站中的某些页面</li>
<li>7.PHP 能够对数据进行加密</li>
<li>8.通过 PHP，您可以不受限于只输出 HTML。您还能够输出图像、PDF 文件、甚至 Flash 影片。您也可以输出任何文本，比如 XHTML 和 XML</li>
<li>9.LAMP中的P就是PHP</li>
</ul>


<h5>安装PHP</h5>

<ul>
<li><ol>
<li>安装Web服务器，LAMP中的Apatch</li>
</ol>
</li>
<li><ol>
<li>安装数据库，Mysql</li>
</ol>
</li>
<li><ol>
<li>安装PHP</li>
</ol>
</li>
</ul>


<p>如需在 Windows 平台设置并立即运行 PHP，您还可以安装<strong>WebMatrix</strong>.</p>

<p>WebMatrix is a free, lightweight, cloud-connected web development tool</p>

<h5>基本语法</h5>

<ul>
<li>1.PHP脚本以<code>&lt;?php　//代码　．．　?&gt;</code>包含起来</li>
<li>2.PHP文件通常包含HTML标签和PHP脚本代码</li>
<li>3.PHP代码中语句以;结尾</li>
<li>4,注释// # /**/</li>
<li>5.大小写敏感</li>
<li>6.有点像Shell脚本</li>
</ul>


<p>变量规则：
&ndash;  变量以 $ 符号开头，其后是变量的名称
&ndash;  变量名称必须以字母或下划线开头
&ndash;  变量名称不能以数字开头
&ndash;  变量名称只能包含字母数字字符和下划线（A-z、0-9 以及 _）
&ndash;  变量名称对大小写敏感（$y 与 $Y 是两个不同的变量）</p>

<p>三种不同作用域变量：
&ndash; local（局部）
&ndash; global（全局）
&ndash; static（静态）</p>

<p>通常，当函数完成/执行后，会删除所有变量。不过，有时我需要不删除某个局部变量。实现这一点需要更进一步的工作。
要完成这一点，请在您首次声明变量时使用 static</p>

<p>echo 和 print 之间的差异：
&ndash; echo &ndash; 能够输出一个以上的字符串
&ndash; print &ndash; 只能输出一个字符串，并始终返回 1
&ndash; 两者均可包含括号</p>

<p><strong>数据类型:</strong>字符串、整数、浮点数、逻辑、数组、对象、NULL</p>

<p><strong>整数规则：</strong>
&ndash; 整数必须有至少一个数字（0-9）
&ndash; 整数不能包含逗号或空格
&ndash; 整数不能有小数点
&ndash; 整数正负均可
&ndash; 可以用三种格式规定整数：十进制、十六进制（前缀是 0x）或八进制（前缀是 0）</p>

<p>浮点数是有小数点或指数形式的数字</p>

<p>逻辑是 true 或 false</p>

<p>对象是存储数据和有关如何处理数据的信息的数据类型。
在 PHP 中，必须明确地声明对象。
首先我们必须声明对象的类。对此，我们使用 class 关键词。类是包含属性和方法的结构。
然后我们在对象类中定义数据类型，然后在该类的实例中使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>class Car
</span><span class='line'>{
</span><span class='line'>  var $color;
</span><span class='line'>  function Car($color="green") {
</span><span class='line'>    $this-&gt;color = $color;
</span><span class='line'>  }
</span><span class='line'>  function what_color() {
</span><span class='line'>    return $this-&gt;color;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>字符串函数</strong>
&ndash; strle()
&ndash; strpos();查找匹配字符，strpos(&ldquo;Hello&rdquo;,&ldquo;ll&rdquo;);结果为2;找不到返回FALSE</p>

<p><a href="http://www.w3school.com.cn/php/php_ref_string.asp">参考字符串函数</a></p>

<p>define()函数定义常量</p>

<p><strong>运算符</strong>
. 串接，如$str1=&ldquo;hello&rdquo;;$str2=$str1.&ldquo;world&rdquo;;则str=&ldquo;helloworld&rdquo;;
.= 串接赋值</p>

<p>还有条件语句，循环，数组等，这一些操作和其它语句有很大的相似，可直接读代码时得到什么意思，但于自己写的话，可能需要常期训练．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xml学习]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/20/xmlxue-xi/"/>
    <updated>2014-07-20T04:13:30+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/20/xmlxue-xi</id>
    <content type="html"><![CDATA[<h4>XML入门</h4>

<p>XML用来传输和存储数据</p>

<p>HTML用来显示数据</p>

<p>Extensible Markup Language可扩展标记语言，类似HTML也是标记语言</p>

<!--more-->


<h5>特点</h5>

<ul>
<li>1.XML标签没有预定义，HTML标签定义了</li>
<li>2.XML被设计用来结构化，存储以及传输信息</li>
<li>3.Json也是和XML功能相同，但用的范围不同</li>
<li>4.XML是纯文本，没有什么特别之处，可以处理文本的软件都可来处理XML</li>
<li>5.XML 是独立于软件和硬件的信息传输工具</li>
<li>6.XML把数据从HTML中分离</li>
<li>7.XML 简化数据共享</li>
<li>8.XML 简化数据传输</li>
<li>9.XHTML &ndash; 最新的 HTML 版本</li>
<li>10.WSDL &ndash; 用于描述可用的 web service</li>
<li>11.WAP 和 WML &ndash; 用于手持设备的标记语言</li>
<li>12.RSS &ndash; 用于 RSS feed 的语言</li>
<li>13.RDF 和 OWL &ndash; 用于描述资源和本体</li>
<li>14.SMIL &ndash; 用于描述针针对 web 的多媒体</li>
</ul>


<h5>语法</h5>

<p>第一行一般为说明文字
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;ISO-8859-1&rdquo;?></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
</span><span class='line'>&lt;note&gt;
</span><span class='line'>&lt;to&gt;George&lt;/to&gt;
</span><span class='line'>&lt;from&gt;John&lt;/from&gt;
</span><span class='line'>&lt;heading&gt;Reminder&lt;/heading&gt;
</span><span class='line'>&lt;body&gt;Don't forget the meeting!&lt;/body&gt;
</span><span class='line'>&lt;/note&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第一行，说明文字</li>
<li>第二行，根部，note是自定义文字，note说明是个书签</li>
<li>第三行，to的内容是George，对应的其它行意义一样</li>
</ul>


<h5>树形结构</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;root&gt;
</span><span class='line'>    &lt;child&gt;
</span><span class='line'>        &lt;subchild&gt;...&lt;/subchild&gt;
</span><span class='line'>    &lt;/child
</span><span class='line'>    &lt;otherchild&gt;...&lt;/otherchild&gt;
</span><span class='line'>&lt;/root&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>1.还可以像HTML那样添加属性</p></li>
<li><p>2.元素必须有关闭标签</p></li>
<li><p>3.对大小写敏感</p></li>
<li><p>4.必须正确嵌套</p></li>
</ul>


<p>这是最基础的</p>
]]></content>
  </entry>
  
</feed>
