<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Vintion's blog]]></title>
  <link href="http://mkdir1.github.io/atom.xml" rel="self"/>
  <link href="http://mkdir1.github.io/"/>
  <updated>2014-08-29T16:17:42+08:00</updated>
  <id>http://mkdir1.github.io/</id>
  <author>
    <name><![CDATA[Vintion]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Poj试题分类]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/29/pojshi-ti-fen-lei/"/>
    <updated>2014-08-29T15:29:08+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/29/pojshi-ti-fen-lei</id>
    <content type="html"><![CDATA[<h4>POJ试题分类</h4>

<!--more-->


<p>初期:</p>

<p>一.基本算法:</p>

<pre><code> (1)枚举. (poj1753,poj2965)

 (2)贪心(poj1328,poj2109,poj2586)

 (3)递归和分治法.

 (4)递推.

 (5)构造法.(poj3295)

 (6)模拟法.(poj1068,poj2632,poj1573,poj2993,poj2996)
</code></pre>

<p>二.图算法:</p>

<pre><code> (1)图的深度优先遍历和广度优先遍历.

 (2)最短路径算法(dijkstra,bellman-ford,floyd,heap+dijkstra)
    (poj1860,poj3259,poj1062,poj2253,poj1125,poj2240)

 (3)最小生成树算法(prim,kruskal)
    (poj1789,poj2485,poj1258,poj3026)

 (4)拓扑排序 (poj1094)

 (5)二分图的最大匹配 (匈牙利算法) (poj3041,poj3020)

 (6)最大流的增广路算法(KM算法). (poj1459,poj3436)
</code></pre>

<p>三.数据结构.</p>

<pre><code> (1)串 (poj1035,poj3080,poj1936)

 (2)排序(快排、归并排(与逆序数有关)、堆排) (poj2388,poj2299)

 (3)简单并查集的应用.

 (4)哈希表和二分查找等高效查找法(数的Hash,串的Hash)  
    (poj3349,poj3274,POJ2151,poj1840,poj2002,poj2503)

 (5)哈夫曼树(poj3253)

 (6)堆

 (7)trie树(静态建树、动态建树) (poj2513)
</code></pre>

<p>四.简单搜索</p>

<pre><code> (1)深度优先搜索 (poj2488,poj3083,poj3009,poj1321,poj2251)

 (2)广度优先搜索(poj3278,poj1426,poj3126,poj3087.poj3414)

 (3)简单搜索技巧和剪枝(poj2531,poj1416,poj2676,1129)
</code></pre>

<p>五.动态规划</p>

<pre><code> (1)背包问题. (poj1837,poj1276)

 (2)型如下表的简单DP(可参考lrj的书 page149):

   1.E[j]=opt{D+w(i,j)} (poj3267,poj1836,poj1260,poj2533)

   2.E[i,j]=opt{D[i-1,j]+xi,D[i,j-1]+yj,D[i-1][j-1]+zij} (最长公共子序列)   
     (poj3176,poj1080,poj1159)

   3.C[i,j]=w[i,j]+opt{C[i,k-1]+C[k,j]}.(最优二分检索树问题)
</code></pre>

<p>六.数学</p>

<pre><code> (1)组合数学:

    1.加法原理和乘法原理.

    2.排列组合.

    3.递推关系.

      (POJ3252,poj1850,poj1019,poj1942)

 (2)数论.

    1.素数与整除问题

    2.进制位.

    3.同余模运算.

      (poj2635, poj3292,poj1845,poj2115)

 (3)计算方法.

    1.二分法求解单调函数相关知识.(poj3273,poj3258,poj1905,poj3122)
</code></pre>

<p>七.计算几何学.</p>

<pre><code> (1)几何公式.

 (2)叉积和点积的运用(如线段相交的判定,点到线段的距离等). (poj2031,poj1039)

 (3)多边型的简单算法(求面积)和相关判定(点在多边型内,多边型是否相交)

     (poj1408,poj1584)

 (4)凸包. (poj2187,poj1113)
</code></pre>

<p>中级:
一.基本算法:</p>

<pre><code> (1)C++的标准模版库的应用. (poj3096,poj3007)
 (2)较为复杂的模拟题的训练(poj3393,poj1472,poj3371,poj1027,poj2706)
</code></pre>

<p>二.图算法:</p>

<pre><code> (1)差分约束系统的建立和求解. (poj1201,poj2983)
 (2)最小费用最大流(poj2516,poj2516,poj2195)
 (3)双连通分量(poj2942)
 (4)强连通分支及其缩点.(poj2186)
 (5)图的割边和割点(poj3352)
 (6)最小割模型、网络流规约(poj3308, )
</code></pre>

<p>三.数据结构.</p>

<pre><code> (1)线段树. (poj2528,poj2828,poj2777,poj2886,poj2750)
 (2)静态二叉检索树. (poj2482,poj2352)
 (3)树状树组(poj1195,poj3321)
 (4)RMQ. (poj3264,poj3368)
 (5)并查集的高级应用. (poj1703,2492)
 (6)KMP算法. (poj1961,poj2406)
</code></pre>

<p>四.搜索</p>

<pre><code> (1)最优化剪枝和可行性剪枝
 (2)搜索的技巧和优化 (poj3411,poj1724)
 (3)记忆化搜索(poj3373,poj1691)
</code></pre>

<p>五.动态规划</p>

<pre><code> (1)较为复杂的动态规划(如动态规划解特别的施行商问题等)
     (poj1191,poj1054,poj3280,poj2029,poj2948,poj1925,poj3034)
 (2)记录状态的动态规划. (POJ3254,poj2411,poj1185)
 (3)树型动态规划(poj2057,poj1947,poj2486,poj3140)
</code></pre>

<p>六.数学</p>

<pre><code> (1)组合数学:
    1.容斥原理.
    2.抽屉原理.
    3.置换群与Polya定理(poj1286,poj2409,poj3270,poj1026).
    4.递推关系和母函数.

 (2)数学.
    1.高斯消元法(poj2947,poj1487, poj2065,poj1166,poj1222)
    2.概率问题. (poj3071,poj3440)
    3.GCD、扩展的欧几里德(中国剩余定理) (poj3101)
 (3)计算方法.
    1.0/1分数规划. (poj2976)
    2.三分法求解单峰(单谷)的极值.
    3.矩阵法(poj3150,poj3422,poj3070)
    4.迭代逼近(poj3301)
 (4)随机化算法(poj3318,poj2454)
 (5)杂题.
     (poj1870,poj3296,poj3286,poj1095)
</code></pre>

<p>七.计算几何学.</p>

<pre><code>    (1)坐标离散化.
    (2)扫描线算法(例如求矩形的面积和周长并,常和线段树或堆一起使用).
        (poj1765,poj1177,poj1151,poj3277,poj2280,poj3004)
    (3)多边形的内核(半平面交)(poj3130,poj3335)
    (4)几何工具的综合应用.(poj1819,poj1066,poj2043,poj3227,poj2165,poj3429)
</code></pre>

<p>高级:
一.基本算法要求:</p>

<pre><code>  (1)代码快速写成,精简但不失风格 
      (poj2525,poj1684,poj1421,poj1048,poj2050,poj3306)
  (2)保证正确性和高效性. poj3434
</code></pre>

<p>二.图算法:</p>

<pre><code>  (1)度限制最小生成树和第K最短路. (poj1639)
  (2)最短路,最小生成树,二分图,最大流问题的相关理论(主要是模型建立和求解)
     (poj3155, poj2112,poj1966,poj3281,poj1087,poj2289,poj3216,poj2446
  (3)最优比率生成树. (poj2728)
  (4)最小树形图(poj3164)
  (5)次小生成树.
  (6)无向图、有向图的最小环  
</code></pre>

<p>三.数据结构.</p>

<pre><code>  (1)trie图的建立和应用. (poj2778)
  (2)LCA和RMQ问题(LCA(最近公共祖先问题) 有离线算法(并查集+dfs) 和 在线算法
      (RMQ+dfs)).(poj1330)
  (3)双端队列和它的应用(维护一个单调的队列,常常在动态规划中起到优化状态转移的
      目的). (poj2823)
  (4)左偏树(可合并堆). 
  (5)后缀树(非常有用的数据结构,也是赛区考题的热点).
     (poj3415,poj3294)
</code></pre>

<p>四.搜索</p>

<pre><code>  (1)较麻烦的搜索题目训练(poj1069,poj3322,poj1475,poj1924,poj2049,poj3426)
  (2)广搜的状态优化:利用M进制数存储状态、转化为串用hash表判重、按位压缩存储状态、双向广搜、A*算法. (poj1768,poj1184,poj1872,poj1324,poj2046,poj1482)
  (3)深搜的优化:尽量用位运算、一定要加剪枝、函数参数尽可能少、层数不易过大、可以考虑双向搜索或者是轮换搜索、IDA*算法. (poj3131,poj2870,poj2286)
</code></pre>

<p>五.动态规划</p>

<pre><code>  (1)需要用数据结构优化的动态规划.
     (poj2754,poj3378,poj3017)
  (2)四边形不等式理论.
  (3)较难的状态DP(poj3133)
</code></pre>

<p>六.数学</p>

<pre><code>  (1)组合数学.
    1.MoBius反演(poj2888,poj2154)
    2.偏序关系理论.
  (2)博奕论.
    1.极大极小过程(poj3317,poj1085)
    2.Nim问题.
</code></pre>

<p>七.计算几何学.</p>

<pre><code>  (1)半平面求交(poj3384,poj2540)
  (2)可视图的建立(poj2966)
  (3)点集最小圆覆盖.
  (4)对踵点(poj2079)
  八.综合题.
  (poj3109,poj1478,poj1462,poj2729,poj2048,poj3336,poj3315,poj2148,poj1263)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读周鸿祎的书]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/28/zhou/"/>
    <updated>2014-08-28T23:29:49+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/28/zhou</id>
    <content type="html"><![CDATA[<h4>我的互联网方法观（周鸿祎）</h4>

<p>果然字字珠玑，句句千钧，值得一看<br/>
大佬的思想果然独到</p>

<!--more-->


<p>1.用户不会在乎你的七大功能，八大特色，只要有一个功能可以打动他，可以解决它心中的痛，或者挠去他心中的痒，那你就有可能获得用户的信赖。</p>

<p>2.不要给用户谈你们公司有多少个院士，多少个千人计划，多2少个专家，多少个博士，你们的产品用到了多fancy的技术，大部分人不会care的. 最显然的就是这种科技新闻下的评论数量几乎为0. 　</p>

<p>3.你做了一个新产品，然后你给用户说我用到了最高精尖的Deep Learning技术，通过利用人工神经网络模拟人脑神经的层次化结构实现更加高效精准识别，他们才不会在乎. 而当他们用一个图片软件发现自己和裴勇俊的相似度高达90%时，他们会发朋友圈，发微博来推广这个软件. 虽然这种产品有典型的一次性特征.</p>

<p>4.用户总是第一位的，老毛也许是对的，深入群众看来确实是个“法宝”。</p>

<p>5.不要尝试着去策划卖点，鼓噪卖相（宣传你的七大功能，八大特征）。就一个问题，用户用的时候觉得“爽”了么？</p>

<p>6.用户不会在乎你的操作系统融入了各种各样眼花缭乱的云技术，而当开机时间突然降到了8s，他们可能会喜大普奔，交口称赞，口碑就这样建立起来了。</p>

<p>7.你连世界都没有观过，哪来的世界观？同样，你连用户的信任都没有争取到，哪来的谈格局、谈布局、谈平台的自信？别说正确的废话了，务实点吧！</p>

<p>8.人才培养工程的“5年一周期，每周期投入培养经费5000W，两院院士做导师，最终培养出100个乔布斯”战略规划沦落成了笑柄，乔布斯不是种出来的。万一不小心培养出来了，请记住齐白石那句话“学我者生，似我者死”。</p>

<p>9.我们嘴巴上喊着创新，创新一旦出来，却开始对它进行价值批判，进而压制创新。而一旦成功，则立马跪舔捧其为神。请多点包容心和原则吧.</p>

<p>10.真正的创新就是颠覆和破坏。Google没有多少通信领域核心的专利和技术，这不妨碍它低价把曾经的通信帝国企业摩托罗拉买入，把专利抽干后甩给联想；诺基亚的遭遇也一样。</p>

<p>12.用户是核心，产品定位于为用户解决问题的工具。所以务必关注这几个问题：解决了什么问题（严重，一般的，一次性的，根本就不是问题），怎么解决（一键式还是像诺基亚那样为了申请个开发者账户托关系还要耗上半年时间安装个软件还要弄懂软件签名让人产生额外的心理负担）。</p>

<p>13.互联网让消费者具备了更多的知情权和选择权，让信息更加对称，传统的一锤子买卖的思维方式不再适用。产品卖给用户之后，你才正式和用户开始打交道。</p>

<p>14.注重用户体验，细节决定成败。</p>

<p>15.在用你的产品时，不要让用户思考，不要让用户纠结，不要让用户有心理负担。多站在用户角度看问题。</p>

<p>16.产品的功能可分为强需求和弱需求。</p>

<p>17.三个在产品设计时不一定正确的假设：第一，假设某个功能，用户一定需要；第二，假设某个功能用户一定知道它存在；第三，假设用户一定按照设计方式使用。</p>

<p>18.要脸皮厚，不要怕人骂；要有强大的可以听取建议的内心，不要有玻璃心。</p>

<p>19.不要尝试着把成功经验变为制度。成功涉及的因素有很多，同样的经历再做一次未必成功。</p>

<p>20.互联网，作为一个价值的创造者，它首先是一个毁灭者。</p>

<p>21.产品要对用户形成强烈的认知和感知，俗称口碑。</p>

<p>22.当产品获得海量用户后，它的边际成本将趋于0，然后通过广告或者服务的方式赚钱，就可以创造新的价值链。</p>

<p>23.任何商业模式的基础和核心都是产品 。</p>

<p>24.商业模式包括产品模式，用户模式，推广模式，收入模式。</p>

<p>25.如果你和用户的距离远了，那么你的价值就可能在价值链中被边缘化了。</p>

<p>26.网游的利润比毒品还高（看来感官带来的愉悦比不上“自我价值自我实现”带来的成就感）</p>

<p>27.小步快跑，快速迭代，快速反馈</p>

<p>28.有了互联网，很多传统的市场手段都会改变。例如把电影看做产品，电影要获得市场反馈，张艺谋的做法是经过放映，收集影评等六个标准的环节和流程。郭敬明的做法就是发一条微博，直接分析下面的上万条评论就可以大致知道哪些才是观众想看到的，便放在片尾作为彩蛋。无论是效率还是成本，后者都具有巨大的优势。</p>

<p>29.创新不只是发明，还包括商业模式上的创新和体验上的创新。</p>

<p>30.商业的本质就是让人性得到释放，最好能把用户的体验简单到极致。</p>

<p>31.利益受损者一定是不思进取，墨守成规的公司</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信公众号开发]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/26/wei-xin-gong-zhong-hao-kai-fa/"/>
    <updated>2014-08-26T21:01:25+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/26/wei-xin-gong-zhong-hao-kai-fa</id>
    <content type="html"><![CDATA[<h4>微信公众号开发</h4>

<p>微信现在使用已经非常广了，如果有一个自己的公众号，那将有更多的功能</p>

<p>具体不表，这里涉及主要是搭建服务器，Php的相关知识。具体的搭建服务过程一笔带过</p>

<!--more-->


<h5>开通公众号</h5>

<ul>
<li>账号注册 [!<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a>] 验证可能需要一段时间</li>
<li>基本功能，这里面的所有功能都可以参考说明完成，</li>
<li>开发模式，需要搭建一个服务器，选用新浪sae服务器，下载示例代码wx_sample.php</li>
</ul>


<h4>示例代码</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>/**
</span><span class='line'>  * wechat php test
</span><span class='line'>  */
</span><span class='line'>
</span><span class='line'>//define your token
</span><span class='line'>define("TOKEN", "weixin");
</span><span class='line'>$wechatObj = new wechatCallbackapiTest();
</span><span class='line'>$wechatObj-&gt;valid();
</span><span class='line'>
</span><span class='line'>class wechatCallbackapiTest
</span><span class='line'>{
</span><span class='line'>  public function valid()
</span><span class='line'>    {
</span><span class='line'>        $echoStr = $_GET["echostr"];
</span><span class='line'>
</span><span class='line'>        //valid signature , option
</span><span class='line'>        if($this-&gt;checkSignature()){
</span><span class='line'>          echo $echoStr;
</span><span class='line'>          exit;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public function responseMsg()
</span><span class='line'>    {
</span><span class='line'>      //get post data, May be due to the different environments
</span><span class='line'>      $postStr = $GLOBALS["HTTP_RAW_POST_DATA"];
</span><span class='line'>
</span><span class='line'>          //extract post data
</span><span class='line'>      if (!empty($postStr)){
</span><span class='line'>                /* libxml_disable_entity_loader is to prevent XML eXternal Entity Injection,
</span><span class='line'>                   the best way is to check the validity of xml by yourself */
</span><span class='line'>                libxml_disable_entity_loader(true);
</span><span class='line'>                  $postObj = simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);
</span><span class='line'>                $fromUsername = $postObj-&gt;FromUserName;
</span><span class='line'>                $toUsername = $postObj-&gt;ToUserName;
</span><span class='line'>                $keyword = trim($postObj-&gt;Content);
</span><span class='line'>                $time = time();
</span><span class='line'>                $textTpl = "&lt;xml&gt;
</span><span class='line'>                          &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;
</span><span class='line'>                          &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;
</span><span class='line'>                          &lt;CreateTime&gt;%s&lt;/CreateTime&gt;
</span><span class='line'>                          &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;
</span><span class='line'>                          &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;
</span><span class='line'>                          &lt;FuncFlag&gt;0&lt;/FuncFlag&gt;
</span><span class='line'>                          &lt;/xml&gt;";             
</span><span class='line'>              if(!empty( $keyword ))
</span><span class='line'>                {
</span><span class='line'>                      $msgType = "text";
</span><span class='line'>                  $contentStr = "Welcome to wechat world!";
</span><span class='line'>                  $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);
</span><span class='line'>                  echo $resultStr;
</span><span class='line'>                }else{
</span><span class='line'>                  echo "Input something...";
</span><span class='line'>                }
</span><span class='line'>
</span><span class='line'>        }else {
</span><span class='line'>          echo "";
</span><span class='line'>          exit;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>      
</span><span class='line'>  private function checkSignature()
</span><span class='line'>  {
</span><span class='line'>        // you must define TOKEN by yourself
</span><span class='line'>        if (!defined("TOKEN")) {
</span><span class='line'>            throw new Exception('TOKEN is not defined!');
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        $signature = $_GET["signature"];
</span><span class='line'>        $timestamp = $_GET["timestamp"];
</span><span class='line'>        $nonce = $_GET["nonce"];
</span><span class='line'>              
</span><span class='line'>      $token = TOKEN;
</span><span class='line'>      $tmpArr = array($token, $timestamp, $nonce);
</span><span class='line'>        // use SORT_STRING rule
</span><span class='line'>      sort($tmpArr, SORT_STRING);
</span><span class='line'>      $tmpStr = implode( $tmpArr );
</span><span class='line'>      $tmpStr = sha1( $tmpStr );
</span><span class='line'>      
</span><span class='line'>      if( $tmpStr == $signature ){
</span><span class='line'>          return true;
</span><span class='line'>      }else{
</span><span class='line'>          return false;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>?&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开题提纲]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/25/kai-ti-ti-gang/"/>
    <updated>2014-08-25T00:47:28+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/25/kai-ti-ti-gang</id>
    <content type="html"><![CDATA[<h3>一种适用于异构视频转码设备的应用层编程框架</h3>

<!--more-->


<hr />

<h4>一. 选题的背景及意义</h4>

<ul>
<li><strong>1</strong> 视频转码解决方案

<ul>
<li>视频转码介绍</li>
<li>解决方案简介</li>
</ul>
</li>
<li><strong>2</strong> 当前主流解决方案

<ul>
<li>软件转码</li>
<li>GPU+CPU</li>
<li>异构设备(重点讲解）</li>
</ul>
</li>
<li><strong>3.</strong> 异构视频转码设备

<ul>
<li>特点</li>
<li>优势：

<ul>
<li>可定制，异构视频转码设备主要是针对特定应用场景定制的，一般适用场景不多</li>
<li>实现的方案多，可选项多。</li>
</ul>
</li>
<li>不足：

<ul>
<li>可移植性差，依赖特定的硬件设备。</li>
<li>可编程性差，依赖对应的底层软件接口。整个程序框架规定好了之后，几乎无法更改，除非是硬件提供者，可看到底层代码实现才能改动，用户几无编程的可能，只能在小问题上修改。</li>
<li>维护升级困难，可扩展性差。这个是基于上面两个带来的问题。</li>
</ul>
</li>
</ul>
</li>
</ul>


<hr />

<h4>二  国内外本学科领域的现状和趋势</h4>

<ul>
<li><p><strong>1.</strong> 针对于视频，国内外研究重点</p>

<ul>
<li>硬件实现（开发或改进硬件的体系结构以适用于视频处理）</li>
<li>算法改进（如何用更高效的算法来处理视频）</li>
<li>提高转码速度相关研究</li>
<li>视频质量或其它细节的研究</li>
</ul>
</li>
<li><p><strong>2.</strong> 视频处理异构设备的现状和进展</p>

<ul>
<li><strong>2.1</strong> CPU+GPU模型是主流</li>
<li><strong>2.2</strong> 其它解决方案</li>
<li><strong>2.3</strong> 这些研究(异构解决方案)的缺点（重点）

<ul>
<li>各异构解决方案太依赖于硬件提供商，底层接口差异性太大，没有一个通用统一的定义接口，导致异构设备编程因难</li>
<li>逻辑层次上，没有一个统一的解决方案，特别是应用层。</li>
<li>虽然有众多的异构设备支持OpenCL等类似语言简化编程，但硬件依赖性太大。</li>
</ul>
</li>
</ul>
</li>
</ul>


<hr />

<h4>三，研究内容和预期目标</h4>

<ul>
<li><strong>1.</strong> 研究的主要内容

<ul>
<li><strong>1.1 视频转码的一般过程</strong></li>
<li><strong>1.2 视频转码分层思想的提出</strong></li>
<li><strong>1.3 视频其它处理在分层中的位置和应用</strong> 其它处理是包括大小缩放，转置，编码算法的选择，视频截取，嵌入音频等，这些可在分层的层次中指出，并具体到应用场景</li>
</ul>
</li>
<li><strong>2.</strong> 预期目标

<ul>
<li><strong>2.1归纳总结出视频转码的逻辑结构，提出基于应用层的视频转码框架</strong></li>
<li><strong>2.2涉及的点包含主要细节</strong>
视频处理有太多的要求和细节，可能无法找到通用统一的归纳，但针对主要的细节，需要有很明确清晰的研究。比如如何处理嵌入音频，如何放大缩小视频，</li>
<li><strong>2.3 在主要的异构平台上实现</strong></li>
</ul>
</li>
</ul>


<hr />

<h4>四. 研究方法，实验方案，技术路线及可行性分析</h4>

<ul>
<li><strong>1.</strong> 借鉴项目中已有成果

<ul>
<li>Intel HD Graphics转码方案，调用的是Intel Media SDK接口，可实现多路视频实时转码。在Intel&reg; Core&trade; i3-3110M CPU @ 2.40GHz处理器上(显示核心是Intel HD Graphics 4000基本频率650MHz)，可实现5路1080p实时转码(h264转h264)</li>
<li>Ffmpeg开源转码框架，其中H.264格式视频编码，改写成调用Intel HD Graphics硬件编码方案，即为此编写硬件编码器</li>
<li>Godson-dm芯片，使用的是Coda980编程接口</li>
</ul>
</li>
<li><p><strong>2.</strong> 本文主要作用和创新点</p>

<ul>
<li><strong>2.1 在应用层面上，提出了一种视频转码的通用框架，而在底层及各异构模型的具体实现则不关注</strong></li>
<li><strong>2.2 针对应用层的编程框架，定义主要的接口和协议，实现视频转码</strong></li>
</ul>
</li>
<li><p><strong>3.</strong> 主要内容：</p>

<ul>
<li><strong>3.1</strong> 归纳出视频处理的一般流程和要点</li>
<li><strong>3.2</strong> 总结一套类似协议的编程框架，类比于网络中的应用层</li>
<li><strong>3.3</strong>  定义主要的接口和实现细节</li>
<li><strong>3.4</strong> 在几种主流异构设备上实现</li>
<li><strong>3.5</strong> 对比各设备中视频转码的数据，分析并修正各接口与实现</li>
</ul>
</li>
<li><p><strong>4.</strong> 视频转码的一般逻辑</p>

<ul>
<li>异构视频设备初始化</li>
<li>资源的初始化</li>
<li>视频处理（循环步骤）

<ul>
<li>1.读取源视频</li>
<li>2.解封装，分析视频格式，大小，码率等相关信息</li>
<li>3.调用对应的解码器，将相关信息存入对应的结构体中，保存下来</li>
<li>4.对视频部分解码
（这个步骤重点描述）循环部分</li>
<li>5.读入编码信息，设定编码器参数和格式</li>
<li>6.调用编码器编码</li>
<li>7.封装相关数据，包括音频和文字</li>
<li>8.结束</li>
</ul>
</li>
<li>资源回收</li>
<li>关闭设备</li>
</ul>
</li>
<li><p><strong>5.</strong> 实验方案</p>

<ul>
<li><strong>5.1</strong> 归纳实现现在项目中的三种异构设备，得到主要评估数据</li>
<li><strong>5.2</strong> 通过对三种异构设备提供的底层接口，定义应用层的接口，并实现其中的几种</li>
</ul>
</li>
</ul>


<hr />

<h4>五，已有的科研基础和科研条件</h4>

<ul>
<li><p><strong>1.</strong>本人已有研究成果</p>

<ul>
<li>Intel HD Graphics转码方案，</li>
<li>Godson-dm芯片，使用的是Coda980</li>
<li>Ffmpeg视频开源解决方案</li>
</ul>
</li>
<li><p><strong>2.</strong>现有成果需要整理</p>

<ul>
<li>以上三种解决方案的相关数据，包括硬件要求，平台，环境，操作系统，转码速度，格式支持，视频质量相关等</li>
</ul>
</li>
<li><p><strong>3.</strong> 总结归纳</p>

<ul>
<li>针对以上大约四种异构转码解决方案，分别总结出各种解决方案应用层的实现方法</li>
<li>定义相关条件和接口要素，并在四种方案中找到对应的接口实现</li>
</ul>
</li>
<li><p><strong>4.</strong> 后续研究</p>

<ul>
<li>GPU转码，使用OpenCL编程框架，调用Nvadia的Cuda接口来实现转码</li>
<li>其它异构视频解决方案</li>
<li>比较异同</li>
</ul>
</li>
</ul>


<hr />

<h4>六，工作计划和进度</h4>

<ul>
<li><p><strong>1.</strong>几个时间点</p>

<ul>
<li>9月前开题</li>
<li>12月中期</li>
<li>第二年5月答辩，6月毕业</li>
</ul>
</li>
<li><p><strong>2.</strong>计划安排</p>

<ul>
<li>从开题到中期阶段，总结归纳已有成果，并收集得到相关数据。调研最新技术，大体有论文雏形。</li>
<li>中期之后，可根据已有的结论成果，应用于其它异构平台。主要是GPU+OpenCl编程框架中。并研究细节问题，丰富论文内容。</li>
<li>撰写论文，参考查阅文献，修改论文</li>
</ul>
</li>
</ul>


<hr />

<h4>七，参考文献</h4>

<hr />

<h4>八，需要制作的图表</h4>

<p><strong>（论文中需要用到的并制作的）</strong></p>

<ul>
<li>图:

<ul>
<li>图1： 视频处理层次图（从底层硬件一直到上层应用）</li>
<li>图2： 应用层视频处理逻辑层（仅针对应用的逻辑结构，重点）</li>
<li>图3-5: 针对具体的某一个实现，比如coda980,Media SDK,ffmpeg的实现，这三个图，需要根据图2的框架，具体到接口和定义上（重点）</li>
<li>图6:GPU+OpenCL编程框架，这个图是根据自己的论文来制作</li>
</ul>
</li>
<li><p>表</p>

<ul>
<li>表1：主流异构视频转码方案和应用场景，平台等</li>
<li>表2：三种已有实现方案的对比，主要是接口的对比，以图3-5为依据</li>
<li>表3：三种已有实现方案数据的对比，主要是针对影响视频的关键要素</li>
</ul>
</li>
<li><p>文献中引用的图表</p></li>
</ul>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最小绝对值]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/22/zui-xiao-jue-dui-zhi/"/>
    <updated>2014-08-22T21:31:19+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/22/zui-xiao-jue-dui-zhi</id>
    <content type="html"><![CDATA[<h4>求一个递增序列中绝对值最小的数</h4>

<p>比如(-3, -1, 2,4,6),返回-1</p>

<p>当然，时间小于O(n)</p>

<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include&lt;stdio.h&gt;
</span><span class='line'>#define ABS(x,y) ((-x)&gt;=(y)?(y):(x))
</span><span class='line'>int GetAbsMin(int *a, int n)
</span><span class='line'>{
</span><span class='line'>    if(a[0]&gt;=0)return a[0];
</span><span class='line'>    if(a[n-1]&lt;=0)return a[n-1];
</span><span class='line'>    int begin = 0;
</span><span class='line'>    int end   = n-1;
</span><span class='line'>
</span><span class='line'>    int left = a[0];
</span><span class='line'>    int right = a[n-1];
</span><span class='line'>    int mid;
</span><span class='line'>    while(begin&lt;=end)
</span><span class='line'>    {
</span><span class='line'>        mid = (begin+end)/2;
</span><span class='line'>        if(a[mid]==0)return 0;
</span><span class='line'>        if(a[mid]&gt;0)
</span><span class='line'>        {
</span><span class='line'>            if(a[mid-1]&lt;0)
</span><span class='line'>            {
</span><span class='line'>                left = a[mid-1];
</span><span class='line'>                right = a[mid];
</span><span class='line'>                break;
</span><span class='line'>            }
</span><span class='line'>            else
</span><span class='line'>            {
</span><span class='line'>                end = mid-1;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        else
</span><span class='line'>        {
</span><span class='line'>            if(a[mid+1]&gt;0)
</span><span class='line'>            {
</span><span class='line'>                left=a[mid];
</span><span class='line'>                right=a[mid+1];
</span><span class='line'>                break;
</span><span class='line'>            }
</span><span class='line'>            else
</span><span class='line'>                begin = mid + 1;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>    return ABS(left,right);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    int n,i;
</span><span class='line'>    int a[100];
</span><span class='line'>    int result;
</span><span class='line'>    while(~scanf("%d",&n))
</span><span class='line'>    {
</span><span class='line'>        for(i=0;i&lt;n;i++)
</span><span class='line'>            scanf("%d",&a[i]);
</span><span class='line'>       result =  GetAbsMin(a,n); 
</span><span class='line'>       printf("%d\n",result);
</span><span class='line'>    }
</span><span class='line'>    return 0;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装arm-linux-gcc]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/20/an-zhuang-arm-linux-gcc/"/>
    <updated>2014-08-20T10:46:59+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/20/an-zhuang-arm-linux-gcc</id>
    <content type="html"><![CDATA[<h4>安装arm-linux-gcc</h4>

<p>版本是arm-linux-gcc-4.4.3.tar.gz
解压后会解到opt目录，即：
<code>tar xvf arm-linux-gcc-4.4.3.tar.gz</code></p>

<!--more-->


<p><code>sudo vim /root/.bashrc</code>
加入</p>

<pre><code>export PATH=$PATH:/opt/toolschain/4.4.3/bin
</code></pre>

<p>安装兼容库　</p>

<pre><code>sudo apt-get install g++-multilib
</code></pre>

<p>测试是否成功：　</p>

<pre><code>arm-linux-gcc -v
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可变参数函数怎么搞?]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/19/ke-bian-can-shu-han-shu-zen-yao-gao/"/>
    <updated>2014-08-19T20:27:39+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/19/ke-bian-can-shu-han-shu-zen-yao-gao</id>
    <content type="html"><![CDATA[<h4>C语言中的可变参数函数</h4>

<p>可变参数函数，比如printf(),这个常用而没深入研究的函数，发现学问很大．</p>

<!--more-->


<h5>原理</h5>

<p>函数的参数入栈顺序是从右到左，这样，第一个参数就在最上面，我们只需要知道第一个参数的地址和后面所有参数的类型就可以确定这些参数的地址了，这样，可变参数函数就需要第一个参数的地址，其余部分就用&hellip;来表示　<br/>
如:
<code>fun(int a, ...)</code>
 &hellip;前面的参数必须存在</p>

<h5>标准宏</h5>

<p>在stdarg.h头文件中有可用的宏来实现可变参数函数
//可变参数标准宏头文件</p>

<h1>include &ldquo;stdarg.h&rdquo;</h1>

<p>//申明va_list数据类型变量pvar，该变量访问变长参数列表中的参数。</p>

<p>va_list pvar;</p>

<p>//宏va_start初始化变长参数列表。pvar是va_list型变量，记载列表中的参数信息。
//parmN是省略号&#8221;&hellip;&ldquo;前的一个参数名，va_start根据此参数，判断参数列表的起始位置。
va_start(pvar, parmN);</p>

<p>//获取变长参数列表中参数的值。pvar是va_list型变量，type为参数值的类型，也是宏va_arg返回数值的类型。
//宏va_arg执行完毕后自动更改对象pvar，将其指向下一个参数。
va_arg(pvar, type);</p>

<p>//关闭本次对变长参数列表的访问。
va_end(pvar);</p>

<h5>实现</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdarg.h&gt;
</span><span class='line'>#include &lt;iosteam&gt;
</span><span class='line'>using namespace std;
</span><span class='line'>
</span><span class='line'>int sum(int count, ...)
</span><span class='line'>{
</span><span class='line'>  int sum_value=0;
</span><span class='line'>
</span><span class='line'>  va_list args;
</span><span class='line'>  va_start(args,count);
</span><span class='line'>  while(count--)
</span><span class='line'>  {
</span><span class='line'>      sum_value+=va_arg(args,int);
</span><span class='line'>  }
</span><span class='line'>  va_end(args);
</span><span class='line'>
</span><span class='line'>  return sum_value;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>  cout&lt;&lt;sum(5,1,2,3,4,5);//输出15
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[进制转化]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/18/jin-zhi-zhuan-hua/"/>
    <updated>2014-08-18T17:35:10+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/18/jin-zhi-zhuan-hua</id>
    <content type="html"><![CDATA[<h4>进制转化</h4>

<p>改进了一下进制转化的代码，每次都有进步</p>

<!--more-->


<h5>Code</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include&lt;stdio.h&gt;
</span><span class='line'>#include&lt;string.h&gt;
</span><span class='line'>
</span><span class='line'>char result[1000];
</span><span class='line'>static int Name[36]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
</span><span class='line'>
</span><span class='line'>void reverse(char *p)
</span><span class='line'>{
</span><span class='line'>    int len = strlen(p);
</span><span class='line'>    int i = 0;
</span><span class='line'>    int j = len-1;
</span><span class='line'>    char ch;
</span><span class='line'>    while(i&lt;j)
</span><span class='line'>    {
</span><span class='line'>        ch = p[i];
</span><span class='line'>        p[i] = p[j];
</span><span class='line'>        p[j] = ch;
</span><span class='line'>        i++;
</span><span class='line'>        j--;
</span><span class='line'>    }
</span><span class='line'>    return;
</span><span class='line'>}
</span><span class='line'>void conver(int n, int m)  
</span><span class='line'>{
</span><span class='line'>    int signal = 0;
</span><span class='line'>    int i = 0;
</span><span class='line'>    if(n&lt;0)
</span><span class='line'>    {
</span><span class='line'>        n = -n;
</span><span class='line'>        signal = -1;
</span><span class='line'>        i= 1;
</span><span class='line'>    }
</span><span class='line'>    while(n/m!=0)
</span><span class='line'>    {
</span><span class='line'>        result[i++] = Name[n%m];
</span><span class='line'>        n = n/m;
</span><span class='line'>    }
</span><span class='line'>    result[i] = Name[n];
</span><span class='line'>    result[i+1] = 0;
</span><span class='line'>    if(signal==-1)
</span><span class='line'>    {
</span><span class='line'>        result[0] = '-';
</span><span class='line'>        reverse(result+1);
</span><span class='line'>    }
</span><span class='line'>    else
</span><span class='line'>        reverse(result);
</span><span class='line'>    printf("%s\n",result);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    int n,m;
</span><span class='line'>    while(~scanf("%d %d",&n,&m))
</span><span class='line'>        conver(n,m);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>将十进制n转化成m进制的字符串输出
这里还可以进一步的是，将十进制的字符串
void conver(char *n, int m)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu上安装CUDA]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/14/ubuntushang-an-zhuang-cuda/"/>
    <updated>2014-08-14T01:41:56+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/14/ubuntushang-an-zhuang-cuda</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机体系结构量化研究方法1]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/13/ji-suan-ji-ti-xi-jie-gou-liang-hua-yan-jiu-fang-fa-1/"/>
    <updated>2014-08-13T20:42:27+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/13/ji-suan-ji-ti-xi-jie-gou-liang-hua-yan-jiu-fang-fa-1</id>
    <content type="html"><![CDATA[<h4>计算机体系结构量化研究方法1</h4>

<p>经典重读，温故知新．<br/>
突然发现，此乃本人专业，竟陌生如此</p>

<!--more-->


<h5>第一章　量化设计与分析基础</h5>

<ol>
<li>计算机生产技术的发展和计算机设计技术的创新</li>
<li>新体系结构商业成功源于人们不再使用汇编语言进行编程，降低了对目标代码兼容性的要求；出现了独立于厂商的标准化操作系统</li>
<li>RISC精简指令集系统，80年代出现，使设计人员专注于两方面的研究：指令级并行（流水线，多指令发射）；缓存的使用</li>
<li>Intel是将80x86指令转化为类似于RISC的指令，由于晶体管数量的飞速发展，再转化成RISC指令时的硬件开销可忽略不计，但在低端应用中，这种转化开销带来的开销与硅面积成本，使得ARM成为了主流，这也是一种RISC体系结构</li>
<li>现在的大型计算机和高性能超级计算机也是由微处理器组合而成的</li>
<li>SPEC基准测试</li>
<li>计算机体系结构和技术改进</li>
<li>即时编译器Just-in-time和跟踪编译Trace-based compiling正在替代传统的编译器和链接器</li>
<li>因特网上的软件即服务Software as a Service正在取代必须在本地计算机上安装的盒装光盘套装软件</li>
<li>风冷芯片最大功耗和无法有效地开发更多指令级并行这两大孪生瓶颈使得单核处理器性能不能快速的提高，多核成为了主流</li>
<li>处理器性能的提高从单纯的依赖指令级并行ILP到转向数据级并行DLP和线程级并行TLP</li>
<li>个人移动设备PMD</li>
<li>响应性能和可预测性能是多媒体应用程序的关键特性</li>
<li>针对服务器，可用性至关重要，高吞吐量</li>
<li>最大规模集群，仓库级计算机WSC</li>
<li>多种级别的并行度现在已经成为计算机设计的推动力量，而能耗和成本则是主要的约束条件</li>
<li>应用程序中主要有两种并行：数据级并行DLP和任务级并行TLP</li>
<li>计算机硬件四种方式：指令级并行／向量体系结构和图行处理器GPU／线程级并行／请求级并行</li>
<li>分类：单指令流单数据流SISD/单指令流多数据流SIMD／多指令流单数据流MISD（暂无）／多指令流多数据流MIMD</li>
<li>指令集设计，功能组织，逻辑设计，实现方式(集成电路设计，包装，电池，冷却..)</li>
<li>指令集体系结构ISA</li>
<li>MIPS  80x86 ARM MIPS64指令集</li>
<li>存储器寻指，都是按字节寻指</li>
<li>寻指模式．例MIPS寻指模式：寄存器寻指，立即数寻指，位移量寻址</li>
<li>操作数的类型和大小</li>
<li>操作指令：数据传输，逻辑运算，算术运算．．．</li>
<li>控制流指令：条件转移，无条件跳转，过程调用，返回等</li>
<li>ISA编码：固定长度和可变长度;ARM和MIPS都是32位指令长度，80x86可变</li>
<li>组成和硬件，组成也叫微体系结构；指令级相同但组成不同的处理器如：AMD Opteron和Intel Core i7</li>
<li>同一系列的计算机通常具有相同的指令集体系结构和几乎相同的组成，但提供不同的存储系统和时钟速率</li>
<li>集成电路逻辑技术；半导体DRAM；半导体闪存；磁盘技术；网络技术</li>
<li>集成电路工艺用特征尺寸来衡量：一个晶体管或一条连线在x或y方向上的最小尺寸，目前2011达到32nm,22nm</li>
<li>晶体管的性能提高大体上与特征尺寸的下降成线性关系，晶体管数目以平方增长</li>
<li>一段连线的信号延迟与其电阻，电容的乘积成正比，特征尺寸缩小时，连线变短，单位长度的电阻和电容都会变差</li>
<li>一般来说，与晶体管性能相比，连线延迟方面的改进小得可怜，增加了设计人员面临的挑战，连线延迟已经成为了大型集成电路的主要设计限制，往往比晶体管开关延迟还要关键，越来越多的时钟周期被消耗在信号在连线上的传播延迟上</li>
<li>功率是设计人员面临的最大挑战：功率引入芯片进行分配，而为仅仅为电源和接地就使用了数以百万计的晶体管和多个互连层；功率以热的形式耗散，必须消除
1.性能，功率，能耗</li>
<li>持续功耗，用热设计功耗TDP来度量，决定冷却需求．TDP不是峰值功率，峰值功率大约是其1.5倍</li>
<li>对于CMOS芯片来说，传统的主要能耗是开关晶体管，也叫动态能耗</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next Second]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/13/next-second/"/>
    <updated>2014-08-13T10:23:05+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/13/next-second</id>
    <content type="html"><![CDATA[<h4>求下一秒</h4>

<p>给定一个时间，求下一秒是什么时间</p>

<!--more-->


<h5>code</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>
</span><span class='line'>bool NextSec(int *nYear,int *nMonth,int *nDate,int *nHour,int *nMinute,int *nSecond)
</span><span class='line'>{
</span><span class='line'>  if(*nYear&lt;0 || *nMonth&gt;12 || *nMonth&lt;0 || *nHour&gt;23 || *nHour&lt;0 || *nMinute&lt;0 || *nMinute&gt;59 || *nSecond&lt;0 || *nSecond&gt;59) 
</span><span class='line'>    return false;
</span><span class='line'>  int nDays;
</span><span class='line'>  switch(*nMonth)
</span><span class='line'>  {
</span><span class='line'>  case 1:
</span><span class='line'>  case 3:
</span><span class='line'>  case 5:
</span><span class='line'>  case 7:
</span><span class='line'>  case 8:
</span><span class='line'>  case 10:
</span><span class='line'>  case 12:
</span><span class='line'>    nDays=31;
</span><span class='line'>    break;
</span><span class='line'>  case 2:// 判断闰年
</span><span class='line'>    if(*nYear%400==0|| (*nYear%100!=0&&*nYear%4==0)) {
</span><span class='line'>        nDays=29;
</span><span class='line'>    }
</span><span class='line'>    else {
</span><span class='line'>        nDays=28;
</span><span class='line'>    }
</span><span class='line'>    break;
</span><span class='line'>  default:
</span><span class='line'>    nDays=30;
</span><span class='line'>    break;
</span><span class='line'>  }
</span><span class='line'>  if(*nDate&lt;0 || *nDate&gt;nDays) 
</span><span class='line'>    return false;
</span><span class='line'>
</span><span class='line'>  (*nSecond)++;  // 秒加1
</span><span class='line'>  if(*nSecond&gt;=60) // 秒满60，做出特殊处理，下面时，日，月等类同
</span><span class='line'>  {
</span><span class='line'>    *nSecond=0;
</span><span class='line'>    (*nMinute)++;
</span><span class='line'>    if(*nMinute&gt;=60) 
</span><span class='line'>    {
</span><span class='line'>        *nMinute=0;
</span><span class='line'>        (*nHour)++;
</span><span class='line'>        if(*nHour&gt;=24)
</span><span class='line'>        {
</span><span class='line'>            *nHour=0;
</span><span class='line'>            (*nDate)++;
</span><span class='line'>            if(*nDate&gt;nDays)
</span><span class='line'>            {
</span><span class='line'>                *nDate=1;
</span><span class='line'>                (*nMonth)++;
</span><span class='line'>                if(*nMonth&gt;12)
</span><span class='line'>                {
</span><span class='line'>                    *nMonth=1;
</span><span class='line'>                    (*nYear)++;
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  return true;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>  int nYear=2004,nMonth=12,nDate=31,nHour=23,nMinute=59,nSecond=59;
</span><span class='line'>  bool res = NextSec(&nYear,&nMonth,&nDate,&nHour,&nMinute,&nSecond);
</span><span class='line'>  if(res)
</span><span class='line'>    printf("The result:%d-%d-%d %d:%d:%d",nYear,nMonth,nDate,nHour,nMinute,nSecond);
</span><span class='line'>  else
</span><span class='line'>    printf("Input error!/n");
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Itoa]]></title>
    <link href="http://mkdir1.github.io/blog/2014/08/12/itoa/"/>
    <updated>2014-08-12T16:05:35+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/08/12/itoa</id>
    <content type="html"><![CDATA[<h4>ITOA</h4>

<p>一个很实现十进制整数转变成任意2-16进制字符串的代码，写得短小精练，原作者确实厉害，叹服</p>

<!--more-->


<h5>code</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>char *my_itoa(int value, int radix) {
</span><span class='line'>  static char buf[32] = {0};
</span><span class='line'>  int i = 30;
</span><span class='line'>  for(;value&&(i&gt;=0);--i,value/=radix) {
</span><span class='line'>      buf[i] = "0123456789abcdef"[value%radix];
</span><span class='line'>  }
</span><span class='line'>  return &buf[i+1];
</span><span class='line'>}
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    int val, radix;
</span><span class='line'>    while(~scanf("%d %d",&val,&radix))
</span><span class='line'>        printf("%s\n",my_itoa(val,radix));
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>仔细体会一下，　enjoy coding&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端rss集合]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/30/qian-duan-rssji-he/"/>
    <updated>2014-07-30T02:31:37+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/30/qian-duan-rssji-he</id>
    <content type="html"><![CDATA[<h4>前端rss集合</h4>

<p>在github上偶然发现一个前端的rss资源，丰富详实，大有裨益．发现此项目作者很早就建立了，居然好东西现在才发觉．<br/>
原资源<a href="https://github.com/impressivewebs/frontend-feeds.git">https://github.com/impressivewebs/frontend-feeds.git</a> 可直接git clone 得到，添加到rss中即可</p>

<!--more-->


<h5>添加方法</h5>

<p>在rss阅读器中，导入xml文件即可
或者在浏览器中打开此xml文件也可导入到浏览器中</p>

<hr />

<h5>仿照制作</h5>

<p>受作者启发，实际上本人也可以做一个自己的rss开源库，这样，当环境迁移或项目变化，都可以马上把自己的数据同步更新过来，岂不很方便．</p>

<hr />

<h5>我的开源</h5>

<p>To be continue&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode-copy List With Random Pointer]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/28/leetcode-copy-list-with-random-pointer/"/>
    <updated>2014-07-28T00:53:19+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/28/leetcode-copy-list-with-random-pointer</id>
    <content type="html"><![CDATA[<h4>Copy List with random pointer</h4>

<p>这题早就看过，解法也知道，但是，想法与代码差距很大，半天都没发现错误．还得多多练习</p>

<!--more-->


<h5>Problem</h5>

<p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>

<p>Return a deep copy of the list.</p>

<h5>code:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Definition for singly-linked list with a random pointer.</span>
</span><span class='line'><span class="cm"> * struct RandomListNode {</span>
</span><span class='line'><span class="cm"> *     int label;</span>
</span><span class='line'><span class="cm"> *     RandomListNode *next, *random;</span>
</span><span class='line'><span class="cm"> *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}</span>
</span><span class='line'><span class="cm"> * };</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span><span class='line'><span class="nl">public:</span>
</span><span class='line'>    <span class="n">RandomListNode</span> <span class="o">*</span><span class="n">copyRandomList</span><span class="p">(</span><span class="n">RandomListNode</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">RandomListNode</span> <span class="o">*</span><span class="n">Head</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">NULL</span><span class="o">==</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="n">RandomListNode</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span><span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="nb">NULL</span><span class="o">!=</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RandomListNode</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">label</span><span class="p">);</span>
</span><span class='line'>            <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="nb">NULL</span><span class="o">!=</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">random</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span> <span class="c1">//　这里可能为空</span>
</span><span class='line'>                <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">random</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">random</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">random</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>             <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">Head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="n">q</span> <span class="o">=</span> <span class="n">Head</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nb">NULL</span><span class="o">==</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Head</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="nb">NULL</span><span class="o">!=</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span>  <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>            <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>       <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span><span class="c1">// 这里要断开</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Head</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>两处注释的地方，瞪大眼睛都没看出来．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[leetcode-4Sum]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/27/leetcode-4sum/"/>
    <updated>2014-07-27T16:14:07+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/27/leetcode-4sum</id>
    <content type="html"><![CDATA[<h4><a href="https://oj.leetcode.com/problems/4sum/">Leetcode-4Sum</a></h4>

<hr />

<p>此题不难，但编码起来，许多细节需要注意．wrong了好多次，发现有两处画蛇添足，良久才恍然大悟．<br/>
有时候，思维逻辑正确，也不能保证编码不出小差错．</p>

<!--more-->


<h5>Problem:</h5>

<p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>

<p>Note:
Elements in a quadruplet <code>(a,b,c,d)</code> must be in non-descending order. <code>(ie, a ≤ b ≤ c ≤ d)</code></p>

<p>The solution set must not contain duplicate quadruplets.</p>

<pre><code>For example, given array S = {1 0 -1 0 -2 2}, and target = 0.
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A solution set is:
</span><span class='line'>(-1,  0, 0, 1)
</span><span class='line'>(-2, -1, 1, 2)
</span><span class='line'>(-2,  0, 0, 2)</span></code></pre></td></tr></table></div></figure>


<h5>Code:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span><span class='line'><span class="nl">public:</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">fourSum</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">num</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">num</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>        <span class="n">sort</span><span class="p">(</span><span class="n">num</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">num</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="p">;</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">-</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="c1">//  i++;</span>
</span><span class='line'>                <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">len</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">j</span><span class="o">&gt;</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                   <span class="c1">// j++;</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">l</span> <span class="o">=</span> <span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">while</span><span class="p">(</span><span class="n">l</span><span class="o">&gt;</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">num</span><span class="p">[</span><span class="n">l</span><span class="p">]</span><span class="o">==</span><span class="n">num</span><span class="p">[</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">l</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="o">&gt;</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">num</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">==</span><span class="n">num</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">sum</span> <span class="o">=</span> <span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="n">num</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">+</span><span class="n">num</span><span class="p">[</span><span class="n">l</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">sum</span><span class="o">&gt;</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">l</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">sum</span><span class="o">&lt;</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>                    <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>                    <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
</span><span class='line'>                    <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">l</span><span class="p">]);</span>
</span><span class='line'>                    <span class="n">result</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">vec</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">vec</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thunderbird下的muttator插件]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/25/thunderbirdxia-de-muttatorcha-jian/"/>
    <updated>2014-07-25T17:00:58+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/25/thunderbirdxia-de-muttatorcha-jian</id>
    <content type="html"><![CDATA[<h4>Thunderbird下的muttator</h4>

<p>在linux下工作，Thunderbird应该不可或缺．但是对于追求极简主义的人来说，用鼠标就是一种耻辱，简直就是浪费生命．虽然在chrome下有vimium，firefox下有vimperator，但是对于Thunderbird这一常见的应用，怎么可能没有一个与之匹配的神器呢？于是<br/>
Muttator横空出世．</p>

<!--more-->


<hr />

<h5>功能</h5>

<p>这就不必介绍了，大多数类vim插件，大同小异．记住不同点反而成了某个插件的特点了</p>

<p>需要注意的几点：</p>

<ol>
<li>在邮件中，用Ctrl+n/p上下选邮件列表中的项</li>
<li>Rss订阅中的每一篇文章，用vim上下切换</li>
<li>针对每一具体文章或者邮件，也是vim键操作</li>
<li>在这三个选项中切换用m来切，比如，从2切到3,用m,3到2用esc切</li>
<li>记几个常用的thunderbird快捷键:

<ul>
<li>F6面板切换</li>
<li>Ctro+o退出</li>
<li>F5接受所有消息</li>
<li>Ctrl++/&mdash;放大缩小</li>
<li>F回复邮件，hint功能</li>
</ul>
</li>
<li>其它功能有特发掘</li>
</ol>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM 重定向]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/25/acm-zhong-ding-xiang/"/>
    <updated>2014-07-25T09:07:06+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/25/acm-zhong-ding-xiang</id>
    <content type="html"><![CDATA[<h4>ACM输入输出重定向</h4>

<p>问题描述：<br/>
在做ACM题时，对于输入输出，总需要键盘来操作，这样显然不方向，对于多数据的测试，显然不合理，现有一个实用的重定向函数，可很好解决.</p>

<!--more-->


<h5>解决</h5>

<p>首先，gcc中有一个－D选项，这样表示在文件中添加宏定义</p>

<pre><code>gcc -o example example.c -D TAG
</code></pre>

<p>在正文中添加</p>

<pre><code>#ifndef TAG
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt+", stdout);
#endif
</code></pre>

<p>这样，就直接可以重定向到两个文件中．</p>

<p>包含在<code>#include&lt;stdio.h&gt;</code>中</p>

<hr />

<h5>另外</h5>

<p>在windows下找到一个解决方案，有bat文件中<code>example.exe&lt;input.txt&gt;output.txt</code> 不过，一般有IDE中就解决了，不必这么麻烦~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程名言名句]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/24/bian-cheng-ming-yan-ming-ju/"/>
    <updated>2014-07-24T16:25:05+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/24/bian-cheng-ming-yan-ming-ju</id>
    <content type="html"><![CDATA[<h4>编程名言</h4>

<!--more-->


<p>UNIX 很简单。但需要有一定天赋的人才能理解这种简单。 Dennis Ritchie</p>

<p>软件在能够复用前必须先能用。
　　–Ralph Johnson</p>

<p>优秀的判断力来自经验，但经验来自于错误的判断。
　　–Fred Brooks</p>

<p>‘理论’是你知道是这样，但它却不好用。‘实践’是它很好用，但你不知道是为什么。程序员将理论和实践结合到一起：既不好用，也不知道是为什么。
　　–佚名</p>

<p>当你想在你的代码中找到一个错误时，这很难；当你认为你的代码是不会有错误时，这就更难了。
　　-Steve McConnell 《代码大全》</p>

<p>如果建筑工人盖房子的方式跟程序员写程序一样，那第一只飞来的啄木鸟就将毁掉人类文明。
　　-Gerald Weinberg</p>

<p>项目开发的六个阶段：</p>

<p>充满热情</p>

<p>醒悟</p>

<p>痛苦</p>

<p>找出罪魁祸首</p>

<p>惩罚无辜</p>

<p>褒奖闲人</p>

<p>　　–佚名</p>

<p>优秀的代码是它自己最好的文档。当你考虑要添加一个注释时，问问自己，“如何能改进这段代码，以让它不需要注释？”</p>

<p>　　-Steve McConnell 《代码大全》</p>

<p>我们这个世界的一个问题是，蠢人信誓旦旦，智人满腹狐疑。</p>

<p>　　–Bertrand Russell</p>

<p>无论在排练中演示是如何的顺利(高效)，当面对真正的现场观众时，出现错误的可能性跟在场观看的人数成正比。</p>

<p>　　–佚名</p>

<p>罗马帝国崩溃的一个主要原因是，没有0，他们没有有效的方法表示他们的C程序成功的终止。</p>

<p>　　–Robert Firth</p>

<p>C程序员永远不会灭亡。他们只是 cast 成了 void。</p>

<p>　　–佚名</p>

<p>如果 debugging 是一种消灭 bug 的过程，那编程就一定是把 bug 放进去的过程。</p>

<p>　　–Edsger Dijkstra</p>

<p>你要么要软件质量，要么要指针算法；两者不可兼得。</p>

<p>(Bertrand Meyer)</p>

<p>有两种方法能写出没有错误的程序；但只有第三种好用。
–Alan J. Perlis</p>

<p>用代码行数来测评软件开发进度，就相对于用重量来计算飞机建造进度。
–比尔-盖茨</p>

<p>最初的 90% 的代码用去了最初 90% 的开发时间。余下的 10% 的代码用掉另外 90% 的开发时间。
–Tom Cargill</p>

<p>程序员和上帝打赌要开发出更大更好——傻瓜都会用的软件。而上帝却总能创造出更大更傻的傻瓜。所以，上帝总能赢。
–Anon</p>

<p>Talk is cheap, show me your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cheat-sheet for Programmer]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/24/cheat-sheet-for-programmer/"/>
    <updated>2014-07-24T16:09:01+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/24/cheat-sheet-for-programmer</id>
    <content type="html"><![CDATA[<h4>useful cheat sheet for programmer</h4>

<p>I found a very useful sheets for programmer. Including almost everyaspects.</p>

<p>Here is the <a href="http://yuncode.net/article/a_5348e54c880e945">LINK</a></p>

<p>Thanks to the author.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell终端快捷键]]></title>
    <link href="http://mkdir1.github.io/blog/2014/07/23/shellzhong-duan-kuai-jie-jian/"/>
    <updated>2014-07-23T09:52:32+08:00</updated>
    <id>http://mkdir1.github.io/blog/2014/07/23/shellzhong-duan-kuai-jie-jian</id>
    <content type="html"><![CDATA[<h4>Shell下的快捷操作</h4>

<!--more-->


<p>黑色为常用的操作</p>

<p><strong>ctrl + d</strong>      删除光标所在位置上的字符相当于VIM里x或者dl</p>

<p>ctrl + h      删除光标所在位置前的字符相当于VIM里hx或者dh</p>

<p><strong>ctrl + k</strong>      删除光标后面所有字符相当于VIM里d shift+$</p>

<p><strong>ctrl + u</strong>      删除光标前面所有字符相当于VIM里d shift+^</p>

<p><strong>ctrl + w</strong>     删除光标前一个单词相当于VIM里db</p>

<p><strong>ctrl + y</strong>      恢复ctrl+u上次执行时删除的字符</p>

<p>ctrl + ?      撤消前一次输入</p>

<p>alt  + r      撤消前一次动作</p>

<p>alt  + d     删除光标所在位置的后单词</p>

<p>移动</p>

<p><strong>ctrl + a</strong>     将光标移动到命令行开头相当于VIM里shift+^</p>

<p><strong>ctrl + e</strong>     将光标移动到命令行结尾处相当于VIM里shift+$</p>

<p><strong>ctrl + f</strong>      光标向后移动一个字符相当于VIM里l</p>

<p><strong>ctrl + b</strong>     光标向前移动一个字符相当于VIM里h</p>

<p>ctrl + 方向键左键    光标移动到前一个单词开头</p>

<p>ctrl + 方向键右键    光标移动到后一个单词结尾</p>

<p><strong>ctrl + x</strong>       在上次光标所在字符和当前光标所在字符之间跳转</p>

<p>alt  + f      跳到光标所在位置单词尾部</p>

<p>替换</p>

<p><strong>ctrl + t</strong>       将光标当前字符与前面一个字符替换</p>

<p>alt  + t     交换两个光标当前所处位置单词和光标前一个单词</p>

<p>alt  + u     把光标当前位置单词变为大写</p>

<p>alt  + l      把光标当前位置单词变为小写</p>

<p>alt  + c      把光标当前位置单词头一个字母变为大写</p>

<p><strong>^oldstr ^newstr</strong>    替换前一次命令中字符串</p>

<p>历史命令编辑</p>

<p><strong>ctrl + p</strong>   返回上一次输入命令字符</p>

<p><strong>ctrl + r</strong>       输入单词搜索历史命令</p>

<p><strong>alt  + p</strong>     输入字符查找与字符相接近的历史命令</p>

<p>alt  + >     返回上一次执行命令</p>

<p>其它</p>

<p><strong>ctrl + s</strong>      锁住终端，貌似有些shell不可用</p>

<p><strong>ctrl + q</strong>      解锁终端</p>

<p><strong>ctrl + l</strong>        清屏相当于命令clear</p>

<p>ctrl + c       另起一行</p>

<p><strong>ctrl + i</strong>       类似TAB健补全功能</p>

<p>ctrl + o      重复执行命令</p>

<p>alt  + 数字键  操作的次数</p>
]]></content>
  </entry>
  
</feed>
